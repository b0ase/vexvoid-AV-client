<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>V3XV0ID Image Animator - Controls</title>
  <!-- P5.js Library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&display=swap');
    
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      font-family: 'Courier New', 'Courier Prime', monospace;
      background: #000000;
      color: #ffffff;
      overflow: hidden;
      font-size: 12px;
      line-height: 1.0;
      font-weight: normal;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-rendering: optimizeLegibility;
      cursor: crosshair;
      position: relative;
    }

    /* Scan lines effect */
    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: repeating-linear-gradient(
        0deg,
        transparent,
        transparent 2px,
        rgba(255, 255, 255, 0.005) 2px,
        rgba(255, 255, 255, 0.005) 4px
      );
      pointer-events: none;
      z-index: 1000;
    }

    /* V3XV0ID branding header */
    .v3xv0id-header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.95);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding: 12px 20px;
      z-index: 999;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .v3xv0id-brand {
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 16px;
      color: #ffffff;
      text-transform: uppercase;
      letter-spacing: 0.2em;
      text-shadow: 0 0 3px rgba(255, 255, 255, 0.8);
    }

    .v3xv0id-subtitle {
      font-family: 'Courier New', monospace;
      font-size: 10px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .cyber-text {
      color: #ffffff;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    /* Tab Navigation */
    .tab-navigation {
      position: fixed;
      top: 60px;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.9);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding: 0 20px;
      z-index: 998;
      display: flex;
      gap: 2px;
    }

    .tab-button {
      background: rgba(0, 0, 0, 0.6);
      color: #888;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-bottom: none;
      padding: 10px 20px;
      cursor: crosshair;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 11px;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      transition: all 0.2s;
      position: relative;
    }

    .tab-button:hover {
      color: #ffffff;
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .tab-button.active {
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border-color: rgba(255, 255, 255, 0.5);
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .tab-button.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 1px;
      background: rgba(0, 0, 0, 0.8);
    }

    .main-container {
      display: flex;
      height: 100vh;
      gap: 15px;
      padding: 110px 15px 15px 15px;
      box-sizing: border-box;
    }

    .tab-content {
      display: none;
      width: 100%;
      height: 100%;
    }

    .tab-content.active {
      display: flex;
      gap: 15px;
    }

    /* Left Column - Dual Layer Palettes */
    .layers-column {
      flex: 0 0 300px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    /* Crossfader Section */
    .crossfader-section {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 15px;
    }

    .crossfader-header {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .crossfader-label {
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 16px;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
      min-width: 20px;
      text-align: center;
    }

    .crossfader-container {
      flex: 1;
      position: relative;
      height: 40px;
      display: flex;
      align-items: center;
    }

    .crossfader {
      width: 100%;
      height: 6px;
      background: rgba(255, 255, 255, 0.2);
      outline: none;
      -webkit-appearance: none;
      cursor: crosshair;
      border: 1px solid rgba(255, 255, 255, 0.3);
      position: relative;
      z-index: 2;
    }

    .crossfader::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 30px;
      background: #ffffff;
      cursor: crosshair;
      border: 2px solid #000000;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
    }

    .crossfader::-webkit-slider-thumb:hover {
      box-shadow: 0 0 12px rgba(255, 255, 255, 0.8);
    }

    .crossfader-track {
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(to right, #ffffff 0%, rgba(255,255,255,0.3) 50%, #ffffff 100%);
      transform: translateY(-50%);
      z-index: 1;
    }

    /* Palette Sections */
    .palette-section {
      flex: 1;
      background: rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      flex-direction: column;
      min-height: 200px;
    }

    .palette-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .palette-header h3 {
      margin: 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .add-layer-btn {
      background: #ffffff;
      color: #000000;
      border: 1px solid #ffffff;
      padding: 6px 12px;
      cursor: crosshair;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 10px;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
    }

    .add-layer-btn:hover {
      background: #000000;
      color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .layers-list {
      flex: 1;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .layer-item {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 12px;
      cursor: crosshair;
      transition: all 0.2s;
      user-select: none;
    }

    .layer-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.5);
    }

    .layer-item.selected {
      background: rgba(255, 255, 255, 0.1);
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .layer-item.dragging {
      opacity: 0.5;
      transform: rotate(2deg);
      z-index: 1000;
    }

    .layer-item.drag-over {
      border-color: #ffffff;
      border-style: dashed;
      background: rgba(255, 255, 255, 0.15);
    }

    .drag-handle {
      display: inline-block;
      margin-right: 8px;
      color: #888;
      cursor: crosshair;
      font-size: 12px;
      font-family: 'Courier New', monospace;
    }

    .layer-name {
      font-weight: bold;
      margin-bottom: 8px;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .layer-buttons {
      display: flex;
      gap: 6px;
      flex-wrap: wrap;
    }

    .layer-btn {
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 4px 8px;
      cursor: crosshair;
      font-size: 10px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
      min-width: 24px;
      text-align: center;
    }

    .layer-btn:hover {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
    }

    .layer-btn.active {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    /* Middle Column - Controls */
    .controls-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .controls-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .controls-header h2 {
      margin: 0;
      font-size: 14px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .selected-layer-info {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 12px;
      margin-bottom: 20px;
      text-align: center;
      color: #ffffff;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .control-group {
      margin-bottom: 20px;
    }

    .control-label {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .control-value {
      color: #ffffff;
      font-weight: bold;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .control-slider {
      width: 100%;
      height: 4px;
      background: rgba(255, 255, 255, 0.2);
      outline: none;
      -webkit-appearance: none;
      cursor: crosshair;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 16px;
      height: 16px;
      background: #ffffff;
      cursor: crosshair;
      transition: all 0.2s;
      border: 1px solid rgba(0, 0, 0, 0.2);
    }

    .control-slider::-webkit-slider-thumb:hover {
      background: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
    }

    .control-select {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 8px;
      cursor: crosshair;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      outline: none;
      transition: all 0.2s;
    }

    .control-select:hover {
      border-color: rgba(255, 255, 255, 0.5);
      box-shadow: 0 0 4px rgba(255, 255, 255, 0.2);
    }

    .control-select:focus {
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .control-select option {
      background: #000000;
      color: #ffffff;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .global-controls {
      margin-top: auto;
      padding-top: 20px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .global-btn {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 12px;
      cursor: crosshair;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 10px;
      transition: all 0.2s;
    }

    .global-btn:hover {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .global-btn.pause {
      background: rgba(255, 255, 255, 0.1);
      border-color: #ffffff;
    }

    .global-btn.pause:hover {
      background: #ffffff;
      color: #000000;
    }

    .global-btn.resume {
      background: rgba(255, 255, 255, 0.1);
      border-color: #ffffff;
    }

    .global-btn.resume:hover {
      background: #ffffff;
      color: #000000;
    }

    /* Right Column - Preview */
    .preview-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .preview-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .preview-header h2 {
      margin: 0;
      font-size: 14px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .preview-screen {
      flex: 1;
      background: #000000;
      border: 1px solid rgba(255, 255, 255, 0.2);
      display: flex;
      flex-direction: column;
      gap: 8px;
      padding: 8px;
      overflow: hidden;
      min-height: 400px;
    }

    .preview-row {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
      min-height: 120px;
    }

    .preview-row.output-preview {
      border: 1px solid #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .preview-row-label {
      position: absolute;
      top: 4px;
      left: 8px;
      font-size: 9px;
      color: #ffffff;
      background: rgba(0,0,0,0.9);
      padding: 2px 6px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      z-index: 10;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .preview-image {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border: 1px solid rgba(255, 255, 255, 0.1);
      filter: contrast(1.1);
    }

    .preview-placeholder {
      color: #888;
      font-size: 11px;
      text-align: center;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    /* Inverse button styling */
    .inverse-btn {
      background: rgba(156, 39, 176, 0.8);
      color: #ffffff;
      border: 1px solid rgba(156, 39, 176, 0.6);
      padding: 4px 8px;
      cursor: crosshair;
      font-size: 10px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
      min-width: 24px;
      text-align: center;
    }

    .inverse-btn:hover {
      background: #9c27b0;
      border-color: #9c27b0;
      box-shadow: 0 0 8px rgba(156, 39, 176, 0.5);
    }

    .inverse-btn.active {
      background: #ffffff;
      color: #9c27b0;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    /* P5.js Pattern Generator Styles */
    .pattern-generator {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .pattern-editor-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .pattern-preview-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .pattern-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .pattern-header h2 {
      margin: 0;
      font-size: 14px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .pattern-presets {
      margin-bottom: 20px;
    }

    .preset-selector {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 8px;
      cursor: crosshair;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      outline: none;
      transition: all 0.2s;
      margin-bottom: 10px;
    }

    .preset-selector:hover {
      border-color: rgba(255, 255, 255, 0.5);
      box-shadow: 0 0 4px rgba(255, 255, 255, 0.2);
    }

    .preset-selector option {
      background: #000000;
      color: #ffffff;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .code-editor-container {
      flex: 1;
      background: #000000;
      border: 1px solid rgba(255, 255, 255, 0.3);
      position: relative;
      overflow: hidden;
    }

    .code-editor {
      width: 100%;
      height: 100%;
      background: #000000;
      color: #ffffff;
      border: none;
      outline: none;
      padding: 15px;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      line-height: 1.4;
      resize: none;
      tab-size: 2;
    }

    .code-editor::-webkit-scrollbar {
      width: 8px;
    }

    .code-editor::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .code-editor::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
      border-radius: 4px;
    }

    .code-editor::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    .pattern-controls {
      margin-top: 15px;
      display: flex;
      gap: 10px;
    }

    .pattern-btn {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 10px;
      cursor: crosshair;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
    }

    .pattern-btn:hover {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .pattern-btn.active {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .pattern-preview-canvas {
      flex: 1;
      background: #000000;
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      min-height: 400px;
    }

    .pattern-preview-canvas canvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .pattern-info {
      margin-top: 15px;
      padding: 15px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .pattern-info-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .pattern-info-label {
      color: #888;
    }

    .pattern-info-value {
      color: #ffffff;
      font-weight: bold;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .layer-target-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .layer-target-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .layer-targets {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .layer-target-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 8px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: all 0.2s;
    }

    .layer-target-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .layer-target-checkbox {
      appearance: none;
      width: 16px;
      height: 16px;
      border: 1px solid rgba(255, 255, 255, 0.3);
      background: rgba(0, 0, 0, 0.8);
      cursor: crosshair;
      position: relative;
    }

    .layer-target-checkbox:checked {
      background: #ffffff;
      border-color: #ffffff;
    }

    .layer-target-checkbox:checked::after {
      content: '✓';
      position: absolute;
      top: -2px;
      left: 2px;
      color: #000000;
      font-size: 12px;
      font-weight: bold;
    }

    .layer-target-name {
      flex: 1;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: #ffffff;
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Media Browser Styles */
    .media-browser {
      display: flex;
      gap: 20px;
      height: 100%;
    }

    .media-library-column {
      flex: 1;
      max-width: 50%;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .media-preview-column {
      flex: 1;
      max-width: 50%;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .media-controls {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .media-search {
      margin: 10px 0;
    }

    .media-filters {
      margin: 10px 0;
    }

    .media-library {
      flex: 1;
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 10px;
      overflow-y: auto;
      max-height: 400px;
    }

    .media-item {
      padding: 8px;
      border: 1px solid #004400;
      margin: 5px 0;
      background: rgba(0, 255, 0, 0.05);
      cursor: pointer;
      transition: all 0.2s;
      font-family: 'Courier New', monospace;
      font-size: 12px;
    }

    .media-item:hover {
      background: rgba(0, 255, 0, 0.2);
      border-color: #00ff00;
    }

    .media-item.selected {
      background: rgba(0, 255, 0, 0.3);
      border-color: #00ff00;
    }

    .media-item-name {
      font-weight: bold;
      color: #00ff00;
    }

    .media-item-meta {
      color: #888;
      font-size: 10px;
      margin-top: 2px;
    }

    .image-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 10px;
      padding: 10px;
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      max-height: 400px;
      overflow-y: auto;
    }

    .image-grid-item {
      aspect-ratio: 1;
      background: #000;
      border: 1px solid #004400;
      border-radius: 3px;
      overflow: hidden;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;
    }

    .image-grid-item:hover {
      border-color: #00ff00;
      transform: scale(1.05);
    }

    .image-grid-item.selected {
      border-color: #00ff00;
      border-width: 2px;
    }

    .image-grid-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .image-grid-item .image-name {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.8);
      color: #00ff00;
      font-size: 10px;
      padding: 2px 4px;
      font-family: 'Courier New', monospace;
    }

    .video-preview-container, .image-preview-container {
      background: #000;
      border: 2px solid #00ff00;
      border-radius: 5px;
      padding: 10px;
      text-align: center;
    }

    .media-info {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 15px;
    }

    .media-actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    /* Sequence Composer Styles */
    .sequence-composer {
      display: flex;
      gap: 20px;
      height: 100%;
    }

    .sequence-builder-column {
      flex: 2;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .sequence-preview-column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .sequence-controls {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .ai-generation-section {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 15px;
    }

    .ai-generation-section h3 {
      color: #00ff00;
      margin: 0 0 10px 0;
      font-family: 'Courier New', monospace;
      font-size: 14px;
    }

    .ai-controls {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .ai-generate-btn {
      background: linear-gradient(45deg, #ff0080, #00ff80);
      border: none;
      color: #000;
      font-weight: bold;
      text-shadow: none;
      animation: pulse 2s infinite;
    }

    .ai-generate-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 0 20px rgba(255, 0, 128, 0.5);
    }

    .ai-status {
      color: #00ff00;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      margin-top: 10px;
      padding: 5px;
      background: rgba(0, 0, 0, 0.5);
      border-radius: 3px;
      text-align: center;
    }

    .sequence-timeline {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 15px;
      flex: 1;
    }

    .timeline-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .timeline-header h3 {
      color: #00ff00;
      margin: 0;
      font-family: 'Courier New', monospace;
      font-size: 14px;
    }

    .timeline-controls {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .timeline-controls .pattern-btn.small {
      padding: 5px 10px;
      font-size: 12px;
    }

    .timeline-tracks {
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid #004400;
      border-radius: 3px;
      padding: 10px;
      min-height: 150px;
      overflow-y: auto;
    }

    .timeline-track {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #004400;
      border-radius: 3px;
      margin: 5px 0;
      padding: 8px;
      position: relative;
    }

    .timeline-track-header {
      font-family: 'Courier New', monospace;
      font-size: 12px;
      color: #00ff00;
      font-weight: bold;
    }

    .timeline-events {
      display: flex;
      gap: 5px;
      margin-top: 5px;
      flex-wrap: wrap;
    }

    .timeline-event {
      background: rgba(0, 255, 0, 0.2);
      border: 1px solid #00ff00;
      border-radius: 2px;
      padding: 2px 6px;
      font-size: 10px;
      font-family: 'Courier New', monospace;
      color: #00ff00;
      cursor: pointer;
      transition: all 0.2s;
    }

    .timeline-event:hover {
      background: rgba(0, 255, 0, 0.4);
      transform: scale(1.05);
    }

    .sequence-actions {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 15px;
    }

    .action-library h4 {
      color: #00ff00;
      margin: 0 0 10px 0;
      font-family: 'Courier New', monospace;
      font-size: 12px;
    }

    .action-item {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #004400;
      border-radius: 3px;
      padding: 8px;
      margin: 5px 0;
      cursor: pointer;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      color: #00ff00;
      transition: all 0.2s;
    }

    .action-item:hover {
      background: rgba(0, 255, 0, 0.2);
      border-color: #00ff00;
      transform: translateX(5px);
    }

    .sequence-library {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 15px;
      max-height: 300px;
      overflow-y: auto;
    }

    .sequence-item {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #004400;
      border-radius: 3px;
      padding: 10px;
      margin: 8px 0;
      cursor: pointer;
      transition: all 0.2s;
    }

    .sequence-item:hover {
      background: rgba(0, 255, 0, 0.2);
      border-color: #00ff00;
      transform: scale(1.02);
    }

    .sequence-item.selected {
      background: rgba(0, 255, 0, 0.3);
      border-color: #00ff00;
    }

    .sequence-item.demo {
      border-style: dashed;
      opacity: 0.7;
    }

    .sequence-name {
      font-family: 'Courier New', monospace;
      font-size: 12px;
      color: #00ff00;
      font-weight: bold;
      margin-bottom: 3px;
    }

    .sequence-meta {
      font-family: 'Courier New', monospace;
      font-size: 10px;
      color: #888;
    }

    .sequence-deployment {
      background: rgba(0, 255, 0, 0.1);
      border: 1px solid #00ff00;
      border-radius: 5px;
      padding: 15px;
    }

    .sequence-deployment h3 {
      color: #00ff00;
      margin: 0 0 10px 0;
      font-family: 'Courier New', monospace;
      font-size: 14px;
    }

    .sequence-deployment .pattern-btn {
      width: 100%;
      margin: 5px 0;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.7; }
    }
  </style>
</head>
<body>
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&display=swap');
    
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      font-family: 'Courier New', 'Courier Prime', monospace;
      background: #000000;
      color: #ffffff;
      overflow: hidden;
      font-size: 12px;
      line-height: 1.0;
      font-weight: normal;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-rendering: optimizeLegibility;
      cursor: crosshair;
      position: relative;
    }

    /* Scan lines effect */
    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: repeating-linear-gradient(
        0deg,
        transparent,
        transparent 2px,
        rgba(255, 255, 255, 0.005) 2px,
        rgba(255, 255, 255, 0.005) 4px
      );
      pointer-events: none;
      z-index: 1000;
    }

    /* V3XV0ID branding header */
    .v3xv0id-header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.95);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding: 12px 20px;
      z-index: 999;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .v3xv0id-brand {
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 16px;
      color: #ffffff;
      text-transform: uppercase;
      letter-spacing: 0.2em;
      text-shadow: 0 0 3px rgba(255, 255, 255, 0.8);
    }

    .v3xv0id-subtitle {
      font-family: 'Courier New', monospace;
      font-size: 10px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .cyber-text {
      color: #ffffff;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    /* Tab Navigation */
    .tab-navigation {
      position: fixed;
      top: 60px;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.9);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding: 0 20px;
      z-index: 998;
      display: flex;
      gap: 2px;
    }

    .tab-button {
      background: rgba(0, 0, 0, 0.6);
      color: #888;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-bottom: none;
      padding: 10px 20px;
      cursor: crosshair;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 11px;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      transition: all 0.2s;
      position: relative;
    }

    .tab-button:hover {
      color: #ffffff;
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .tab-button.active {
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border-color: rgba(255, 255, 255, 0.5);
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .tab-button.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      right: 0;
      height: 1px;
      background: rgba(0, 0, 0, 0.8);
    }

    .main-container {
      display: flex;
      height: 100vh;
      gap: 15px;
      padding: 110px 15px 15px 15px;
      box-sizing: border-box;
    }

    .tab-content {
      display: none;
      width: 100%;
      height: 100%;
    }

    .tab-content.active {
      display: flex;
      gap: 15px;
    }

    /* Left Column - Dual Layer Palettes */
    .layers-column {
      flex: 0 0 300px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    /* Crossfader Section */
    .crossfader-section {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 15px;
    }

    .crossfader-header {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .crossfader-label {
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 16px;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
      min-width: 20px;
      text-align: center;
    }

    .crossfader-container {
      flex: 1;
      position: relative;
      height: 40px;
      display: flex;
      align-items: center;
    }

    .crossfader {
      width: 100%;
      height: 6px;
      background: rgba(255, 255, 255, 0.2);
      outline: none;
      -webkit-appearance: none;
      cursor: crosshair;
      border: 1px solid rgba(255, 255, 255, 0.3);
      position: relative;
      z-index: 2;
    }

    .crossfader::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 30px;
      background: #ffffff;
      cursor: crosshair;
      border: 2px solid #000000;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
    }

    .crossfader::-webkit-slider-thumb:hover {
      box-shadow: 0 0 12px rgba(255, 255, 255, 0.8);
    }

    .crossfader-track {
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(to right, #ffffff 0%, rgba(255,255,255,0.3) 50%, #ffffff 100%);
      transform: translateY(-50%);
      z-index: 1;
    }

    /* Palette Sections */
    .palette-section {
      flex: 1;
      background: rgba(0, 0, 0, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      flex-direction: column;
      min-height: 200px;
    }

    .palette-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .palette-header h3 {
      margin: 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .add-layer-btn {
      background: #ffffff;
      color: #000000;
      border: 1px solid #ffffff;
      padding: 6px 12px;
      cursor: crosshair;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 10px;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
    }

    .add-layer-btn:hover {
      background: #000000;
      color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .layers-list {
      flex: 1;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .layer-item {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 12px;
      cursor: crosshair;
      transition: all 0.2s;
      user-select: none;
    }

    .layer-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.5);
    }

    .layer-item.selected {
      background: rgba(255, 255, 255, 0.1);
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .layer-item.dragging {
      opacity: 0.5;
      transform: rotate(2deg);
      z-index: 1000;
    }

    .layer-item.drag-over {
      border-color: #ffffff;
      border-style: dashed;
      background: rgba(255, 255, 255, 0.15);
    }

    .drag-handle {
      display: inline-block;
      margin-right: 8px;
      color: #888;
      cursor: crosshair;
      font-size: 12px;
      font-family: 'Courier New', monospace;
    }

    .layer-name {
      font-weight: bold;
      margin-bottom: 8px;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .layer-buttons {
      display: flex;
      gap: 6px;
      flex-wrap: wrap;
    }

    .layer-btn {
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 4px 8px;
      cursor: crosshair;
      font-size: 10px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
      min-width: 24px;
      text-align: center;
    }

    .layer-btn:hover {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
    }

    .layer-btn.active {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    /* Middle Column - Controls */
    .controls-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .controls-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .controls-header h2 {
      margin: 0;
      font-size: 14px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .selected-layer-info {
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 12px;
      margin-bottom: 20px;
      text-align: center;
      color: #ffffff;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .control-group {
      margin-bottom: 20px;
    }

    .control-label {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .control-value {
      color: #ffffff;
      font-weight: bold;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .control-slider {
      width: 100%;
      height: 4px;
      background: rgba(255, 255, 255, 0.2);
      outline: none;
      -webkit-appearance: none;
      cursor: crosshair;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 16px;
      height: 16px;
      background: #ffffff;
      cursor: crosshair;
      transition: all 0.2s;
      border: 1px solid rgba(0, 0, 0, 0.2);
    }

    .control-slider::-webkit-slider-thumb:hover {
      background: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
    }

    .control-select {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 8px;
      cursor: crosshair;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      outline: none;
      transition: all 0.2s;
    }

    .control-select:hover {
      border-color: rgba(255, 255, 255, 0.5);
      box-shadow: 0 0 4px rgba(255, 255, 255, 0.2);
    }

    .control-select:focus {
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .control-select option {
      background: #000000;
      color: #ffffff;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .global-controls {
      margin-top: auto;
      padding-top: 20px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .global-btn {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 12px;
      cursor: crosshair;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 10px;
      transition: all 0.2s;
    }

    .global-btn:hover {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .global-btn.pause {
      background: rgba(255, 255, 255, 0.1);
      border-color: #ffffff;
    }

    .global-btn.pause:hover {
      background: #ffffff;
      color: #000000;
    }

    .global-btn.resume {
      background: rgba(255, 255, 255, 0.1);
      border-color: #ffffff;
    }

    .global-btn.resume:hover {
      background: #ffffff;
      color: #000000;
    }

    /* Right Column - Preview */
    .preview-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .preview-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .preview-header h2 {
      margin: 0;
      font-size: 14px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .preview-screen {
      flex: 1;
      background: #000000;
      border: 1px solid rgba(255, 255, 255, 0.2);
      display: flex;
      flex-direction: column;
      gap: 8px;
      padding: 8px;
      overflow: hidden;
      min-height: 400px;
    }

    .preview-row {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
      min-height: 120px;
    }

    .preview-row.output-preview {
      border: 1px solid #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .preview-row-label {
      position: absolute;
      top: 4px;
      left: 8px;
      font-size: 9px;
      color: #ffffff;
      background: rgba(0,0,0,0.9);
      padding: 2px 6px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      z-index: 10;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .preview-image {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border: 1px solid rgba(255, 255, 255, 0.1);
      filter: contrast(1.1);
    }

    .preview-placeholder {
      color: #888;
      font-size: 11px;
      text-align: center;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    /* Inverse button styling */
    .inverse-btn {
      background: rgba(156, 39, 176, 0.8);
      color: #ffffff;
      border: 1px solid rgba(156, 39, 176, 0.6);
      padding: 4px 8px;
      cursor: crosshair;
      font-size: 10px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
      min-width: 24px;
      text-align: center;
    }

    .inverse-btn:hover {
      background: #9c27b0;
      border-color: #9c27b0;
      box-shadow: 0 0 8px rgba(156, 39, 176, 0.5);
    }

    .inverse-btn.active {
      background: #ffffff;
      color: #9c27b0;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    /* P5.js Pattern Generator Styles */
    .pattern-generator {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .pattern-editor-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .pattern-preview-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .pattern-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .pattern-header h2 {
      margin: 0;
      font-size: 14px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .pattern-presets {
      margin-bottom: 20px;
    }

    .preset-selector {
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 8px;
      cursor: crosshair;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      outline: none;
      transition: all 0.2s;
      margin-bottom: 10px;
    }

    .preset-selector:hover {
      border-color: rgba(255, 255, 255, 0.5);
      box-shadow: 0 0 4px rgba(255, 255, 255, 0.2);
    }

    .preset-selector option {
      background: #000000;
      color: #ffffff;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .code-editor-container {
      flex: 1;
      background: #000000;
      border: 1px solid rgba(255, 255, 255, 0.3);
      position: relative;
      overflow: hidden;
    }

    .code-editor {
      width: 100%;
      height: 100%;
      background: #000000;
      color: #ffffff;
      border: none;
      outline: none;
      padding: 15px;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      line-height: 1.4;
      resize: none;
      tab-size: 2;
    }

    .code-editor::-webkit-scrollbar {
      width: 8px;
    }

    .code-editor::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .code-editor::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
      border-radius: 4px;
    }

    .code-editor::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    .pattern-controls {
      margin-top: 15px;
      display: flex;
      gap: 10px;
    }

    .pattern-btn {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      color: #ffffff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 10px;
      cursor: crosshair;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all 0.2s;
    }

    .pattern-btn:hover {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .pattern-btn.active {
      background: #ffffff;
      color: #000000;
      border-color: #ffffff;
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    }

    .pattern-preview-canvas {
      flex: 1;
      background: #000000;
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      min-height: 400px;
    }

    .pattern-preview-canvas canvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .pattern-info {
      margin-top: 15px;
      padding: 15px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .pattern-info-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .pattern-info-label {
      color: #888;
    }

    .pattern-info-value {
      color: #ffffff;
      font-weight: bold;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .layer-target-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .layer-target-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .layer-targets {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .layer-target-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 8px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: all 0.2s;
    }

    .layer-target-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .layer-target-checkbox {
      appearance: none;
      width: 16px;
      height: 16px;
      border: 1px solid rgba(255, 255, 255, 0.3);
      background: rgba(0, 0, 0, 0.8);
      cursor: crosshair;
      position: relative;
    }

    .layer-target-checkbox:checked {
      background: #ffffff;
      border-color: #ffffff;
    }

    .layer-target-checkbox:checked::after {
      content: '✓';
      position: absolute;
      top: -2px;
      left: 2px;
      color: #000000;
      font-size: 12px;
      font-weight: bold;
    }

    .layer-target-name {
      flex: 1;
      font-size: 11px;
      font-family: 'Courier New', monospace;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: #ffffff;
    }

    /* Scrollbar styling */
    .layers-list::-webkit-scrollbar {
      width: 4px;
    }

    .layers-list::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
    }

    .layers-list::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.3);
    }

    .layers-list::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.5);
    }

    /* Music Player Styles */
    .music-player {
      display: flex;
      gap: 15px;
      height: 100%;
    }

    .music-library-column {
      flex: 0 0 400px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-player-column {
      flex: 1;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 20px;
      display: flex;
      flex-direction: column;
    }

    .music-controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
    }

    .music-search {
      margin-bottom: 20px;
    }

    .music-library {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      overflow-y: auto;
      min-height: 300px;
    }

    .music-track-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 8px;
      cursor: crosshair;
      transition: all 0.2s;
    }

    .music-track-item:hover {
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.4);
    }

    .music-track-item.playing {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.6);
    }

    .track-number {
      min-width: 30px;
      font-size: 10px;
      color: #888;
      text-align: center;
    }

    .track-details {
      flex: 1;
    }

    .track-name {
      font-size: 11px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 2px;
    }

    .track-meta {
      font-size: 9px;
      color: #888;
    }

    .track-duration {
      font-size: 10px;
      color: #888;
      min-width: 40px;
      text-align: right;
    }

    .music-queue-section {
      margin-top: 20px;
      padding-top: 15px;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .music-queue-section h3 {
      margin: 0 0 15px 0;
      font-size: 12px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: #ffffff;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .music-queue {
      max-height: 150px;
      overflow-y: auto;
    }

    .now-playing {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .track-info {
      flex: 1;
    }

    .track-title {
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    }

    .track-artist {
      font-size: 12px;
      color: #888;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .track-artwork {
      width: 80px;
      height: 80px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
    }

    .player-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .player-controls .pattern-btn {
      flex: 0 0 auto;
      min-width: 50px;
    }

    .progress-section {
      margin-bottom: 20px;
    }

    .time-display {
      display: flex;
      justify-content: space-between;
      font-size: 11px;
      color: #888;
      margin-bottom: 10px;
      font-family: 'Courier New', monospace;
    }

    .progress-bar-container {
      position: relative;
    }

    .volume-section {
      margin-bottom: 20px;
    }

    .audio-visualizer {
      flex: 1;
      background: rgba(0, 0, 0, 0.6);
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 15px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 20px;
      min-height: 200px;
    }

    #visualizerCanvas {
      max-width: 100%;
      max-height: 100%;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar styling */
  </style>
</head>
<body>
  <!-- V3XV0ID Header -->
  <div class="v3xv0id-header">
    <div class="v3xv0id-brand">V3XV0ID</div>
    <div class="v3xv0id-subtitle">Image Animator Controls</div>
  </div>

  <!-- Tab Navigation -->
  <div class="tab-navigation">
    <button class="tab-button active" data-tab="layers">🎛️ LAYERS</button>
    <button class="tab-button" data-tab="patterns">🎨 PATTERNS</button>
    <button class="tab-button" data-tab="music">🎵 MUSIC</button>
    <button class="tab-button" data-tab="videos">🎬 VIDEOS</button>
    <button class="tab-button" data-tab="images">🖼️ IMAGES</button>
    <button class="tab-button" data-tab="composer">🎭 COMPOSER</button>
  </div>
  
  <div class="main-container">
    <!-- Layers Tab Content -->
    <div class="tab-content active" id="layersTab">
      <!-- V3XV0ID Cloud Performance Section -->
      <div class="v3xv0id-performance-section" style="position: fixed; top: 70px; right: 15px; width: 300px; background: rgba(0, 0, 0, 0.95); border: 2px solid rgba(255, 255, 255, 0.3); padding: 15px; z-index: 998; display: none;">
        <div class="performance-header" style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid rgba(255, 255, 255, 0.2);">
          <h3 style="margin: 0; font-size: 14px; font-family: 'Courier New', monospace; font-weight: bold; text-transform: uppercase; letter-spacing: 0.1em; color: #ffffff; text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);">🎭 V3XV0ID CLOUD</h3>
          <div style="font-size: 10px; color: #888; text-transform: uppercase; letter-spacing: 0.05em; margin-top: 5px;">PERFORMANCE SYSTEM</div>
        </div>
        
        <div class="performance-status" style="margin-bottom: 15px; padding: 10px; background: rgba(0, 0, 0, 0.6); border: 1px solid rgba(255, 255, 255, 0.2);">
          <div id="cloudStatus" style="font-size: 11px; font-family: 'Courier New', monospace; color: #888; text-transform: uppercase;">🌐 CONNECTING...</div>
          <div id="performanceStatus" style="font-size: 11px; font-family: 'Courier New', monospace; color: #888; text-transform: uppercase; margin-top: 5px;">⏹️ READY</div>
        </div>
        
        <div class="performance-controls" style="display: flex; flex-direction: column; gap: 10px;">
          <button id="initCloudBtn" class="performance-btn" style="background: #ffffff; color: #000000; border: 1px solid #ffffff; padding: 10px; cursor: crosshair; font-family: 'Courier New', monospace; font-weight: bold; font-size: 11px; text-transform: uppercase; letter-spacing: 0.05em; transition: all 0.2s;">
            🌐 CONNECT TO CLOUD
          </button>
          
          <button id="startPerformanceBtn" class="performance-btn" style="background: rgba(0, 0, 0, 0.8); color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.3); padding: 10px; cursor: crosshair; font-family: 'Courier New', monospace; font-weight: bold; font-size: 11px; text-transform: uppercase; letter-spacing: 0.05em; transition: all 0.2s;" disabled>
            🎭 START PERFORMANCE
          </button>
          
          <button id="stopPerformanceBtn" class="performance-btn" style="background: rgba(0, 0, 0, 0.8); color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.3); padding: 10px; cursor: crosshair; font-family: 'Courier New', monospace; font-weight: bold; font-size: 11px; text-transform: uppercase; letter-spacing: 0.05em; transition: all 0.2s;" disabled>
            🛑 STOP PERFORMANCE
          </button>
        </div>
        
        <div class="performance-info" style="margin-top: 15px; padding-top: 15px; border-top: 1px solid rgba(255, 255, 255, 0.2);">
          <div id="currentTrack" style="font-size: 10px; font-family: 'Courier New', monospace; color: #888; text-transform: uppercase; margin-bottom: 5px;">NO TRACK</div>
          <div id="performanceProgress" style="width: 100%; height: 4px; background: rgba(255, 255, 255, 0.2); border: 1px solid rgba(255, 255, 255, 0.1); margin-bottom: 5px;">
            <div id="progressBar" style="height: 100%; background: #ffffff; width: 0%; transition: width 0.1s;"></div>
          </div>
          <div id="performanceTime" style="font-size: 10px; font-family: 'Courier New', monospace; color: #888; text-transform: uppercase;">00:00 / 00:00</div>
        </div>
        
        <button id="togglePerformancePanel" style="position: absolute; top: -15px; right: -15px; width: 30px; height: 30px; background: rgba(0, 0, 0, 0.95); color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.3); cursor: crosshair; font-family: 'Courier New', monospace; font-size: 12px;">✕</button>
      </div>
      
      <!-- V3XV0ID Cloud Toggle Button -->
      <button id="showPerformanceBtn" style="position: fixed; top: 80px; right: 15px; background: rgba(0, 0, 0, 0.95); color: #ffffff; border: 1px solid rgba(255, 255, 255, 0.3); padding: 8px 12px; cursor: crosshair; font-family: 'Courier New', monospace; font-weight: bold; font-size: 10px; text-transform: uppercase; letter-spacing: 0.05em; z-index: 997; transition: all 0.2s;">
        🎭 V3XV0ID
      </button>

      <!-- Left Column - Dual Layer Palettes -->
      <div class="layers-column">
      <!-- Top Palette (A) -->
      <div class="palette-section">
        <div class="palette-header">
          <h3>PALETTE A</h3>
          <button class="add-layer-btn" id="addLayerABtn">+ ADD</button>
        </div>
        <div class="layers-list" id="layersListA">
          <!-- Palette A layers will be populated here -->
        </div>
      </div>
      
      <!-- Crossfader Section - Between Palettes -->
      <div class="crossfader-section">
        <div class="crossfader-header">
          <span class="crossfader-label">A</span>
          <div class="crossfader-container">
            <input type="range" class="crossfader" id="crossfader" min="0" max="100" value="0">
            <div class="crossfader-track"></div>
          </div>
          <span class="crossfader-label">B</span>
        </div>
      </div>
      
      <!-- Bottom Palette (B) -->
      <div class="palette-section">
        <div class="palette-header">
          <h3>PALETTE B</h3>
          <button class="add-layer-btn" id="addLayerBBtn">+ ADD</button>
        </div>
        <div class="layers-list" id="layersListB">
          <!-- Palette B layers will be populated here -->
        </div>
      </div>
    </div>

    <!-- Middle Column - Controls -->
    <div class="controls-column">
      <div class="controls-header">
        <h2>CONTROLS</h2>
      </div>
      
      <div class="selected-layer-info" id="selectedLayerInfo">
        No layer selected
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Speed</span>
          <span class="control-value" id="speedValue">100 ms</span>
        </div>
        <input type="range" class="control-slider" id="speedControl" min="1" max="100" value="20">
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Size</span>
          <span class="control-value" id="sizeValue">100%</span>
        </div>
        <input type="range" class="control-slider" id="sizeControl" min="10" max="300" value="100">
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Jitter</span>
          <span class="control-value" id="jitterValue">0px</span>
        </div>
        <input type="range" class="control-slider" id="jitterControl" min="0" max="100" value="0">
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Opacity</span>
          <span class="control-value" id="opacityValue">100%</span>
        </div>
        <input type="range" class="control-slider" id="opacityControl" min="0" max="100" value="100">
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Blend Mode</span>
          <span class="control-value" id="blendModeValue">Normal</span>
        </div>
        <select class="control-select" id="blendModeControl">
          <option value="normal">Normal</option>
          <option value="screen">Screen</option>
          <option value="multiply">Multiply</option>
          <option value="overlay">Overlay</option>
          <option value="soft-light">Soft Light</option>
          <option value="hard-light">Hard Light</option>
          <option value="color-dodge">Color Dodge</option>
          <option value="color-burn">Color Burn</option>
          <option value="darken">Darken</option>
          <option value="lighten">Lighten</option>
          <option value="difference">Difference</option>
          <option value="exclusion">Exclusion</option>
          <option value="hue">Hue</option>
          <option value="saturation">Saturation</option>
          <option value="color">Color</option>
          <option value="luminosity">Luminosity</option>
        </select>
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Strobe</span>
          <span class="control-value" id="strobeValue">0 Hz</span>
        </div>
        <input type="range" class="control-slider" id="strobeControl" min="0" max="20" value="0">
      </div>

      <div class="control-group">
        <div class="control-label">
          <span>Impact</span>
          <span class="control-value" id="impactValue">0 Hz</span>
        </div>
        <input type="range" class="control-slider" id="impactControl" min="0" max="20" value="0">
      </div>

      <div class="global-controls">
        <button class="global-btn resume" id="playPauseBtn">⏸️ PAUSE ALL</button>
        <button class="global-btn" id="setBackgroundBtn">🖼️ SET DEFAULT BACKGROUND</button>
      </div>
    </div>

    <!-- Right Column - Preview -->
    <div class="preview-column">
      <div class="preview-header">
        <h2>PREVIEW</h2>
      </div>
      <div class="preview-screen" id="previewScreen">
        <div class="preview-row output-preview" id="outputPreview">
          <div class="preview-row-label">OUTPUT WINDOW</div>
          <div class="preview-placeholder">NO OUTPUT CONTENT</div>
        </div>
        <div class="preview-row" id="preview2">
          <div class="preview-row-label">PALETTE A</div>
          <div class="preview-placeholder">NO CONTENT</div>
        </div>
        <div class="preview-row" id="preview3">
          <div class="preview-row-label">PALETTE B</div>
          <div class="preview-placeholder">NO CONTENT</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Patterns Tab Content -->
  <div class="tab-content" id="patternsTab">
    <div class="pattern-generator">
      <!-- Left Column - Pattern Editor -->
      <div class="pattern-editor-column">
        <div class="pattern-header">
          <h2>🎨 P5.JS STUDIO</h2>
        </div>

        <div class="pattern-presets">
          <select class="preset-selector" id="presetSelector">
            <option value="">SELECT PRESET</option>
            <option value="plasma">PLASMA WAVES</option>
            <option value="tunnel">TUNNEL VISION</option>
            <option value="mandala">MANDALA SPIRAL</option>
            <option value="matrix">MATRIX RAIN</option>
            <option value="fractal">FRACTAL TREE</option>
            <option value="particles">PARTICLE SYSTEM</option>
            <option value="noise">PERLIN NOISE</option>
            <option value="kaleidoscope">KALEIDOSCOPE</option>
            <option value="waveform">AUDIO WAVEFORM</option>
            <option value="custom">CUSTOM CODE</option>
          </select>
        </div>

        <div class="code-editor-container">
          <textarea class="code-editor" id="codeEditor" placeholder="// V3XV0ID P5.js Pattern Generator
// Write your P5.js code here...

function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  background(0);
  
  // Your creative code here
  for (let i = 0; i < 100; i++) {
    let x = noise(i * 0.01, frameCount * 0.01) * width;
    let y = noise(i * 0.01 + 1000, frameCount * 0.01) * height;
    let hue = (frameCount + i * 3) % 360;
    
    fill(hue, 80, 90);
    noStroke();
    circle(x, y, 10);
  }
}"></textarea>
        </div>

        <div class="pattern-controls">
          <button class="pattern-btn" id="runPatternBtn">▶️ RUN</button>
          <button class="pattern-btn" id="stopPatternBtn">⏹️ STOP</button>
          <button class="pattern-btn" id="exportPatternBtn">💾 EXPORT</button>
        </div>

        <div class="layer-target-section">
          <h3>🎯 TARGET LAYERS</h3>
          <div class="layer-targets" id="layerTargets">
            <!-- Layer targets will be populated dynamically -->
          </div>
        </div>
      </div>

      <!-- Right Column - Pattern Preview -->
      <div class="pattern-preview-column">
        <div class="pattern-header">
          <h2>🖥️ PREVIEW</h2>
        </div>

        <div class="pattern-preview-canvas" id="patternPreviewCanvas">
          <div class="preview-placeholder">CLICK RUN TO START PATTERN</div>
        </div>

        <div class="pattern-info">
          <div class="pattern-info-item">
            <span class="pattern-info-label">STATUS:</span>
            <span class="pattern-info-value" id="patternStatus">STOPPED</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">FPS:</span>
            <span class="pattern-info-value" id="patternFPS">0</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">RESOLUTION:</span>
            <span class="pattern-info-value" id="patternResolution">400x400</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">ACTIVE LAYERS:</span>
            <span class="pattern-info-value" id="activeLayers">0</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Music Tab Content -->
  <div class="tab-content" id="musicTab">
    <div class="music-player">
      <!-- Left Column - Music Library -->
      <div class="music-library-column">
        <div class="pattern-header">
          <h2>🎵 V3XV0ID MUSIC</h2>
        </div>

        <div class="music-controls">
          <button class="pattern-btn" id="loadMusicBtn">🌐 LOAD CLOUD MUSIC</button>
          <button class="pattern-btn" id="loadLocalMusicBtn">📁 LOAD LOCAL MUSIC</button>
        </div>

        <div class="music-search">
          <input type="text" class="control-select" id="musicSearch" placeholder="SEARCH TRACKS...">
        </div>

        <div class="music-library" id="musicLibrary">
          <div class="preview-placeholder">CLICK LOAD TO ACCESS MUSIC</div>
        </div>

        <div class="music-queue-section">
          <h3>🎭 QUEUE</h3>
          <div class="music-queue" id="musicQueue">
            <!-- Queue items will be populated here -->
          </div>
        </div>
      </div>

      <!-- Right Column - Player & Visualizer -->
      <div class="music-player-column">
        <div class="pattern-header">
          <h2>🎧 PLAYER</h2>
        </div>

        <div class="now-playing">
          <div class="track-info">
            <div class="track-title" id="currentTrackTitle">NO TRACK LOADED</div>
            <div class="track-artist" id="currentTrackArtist">V3XV0ID</div>
          </div>
          
          <div class="track-artwork" id="trackArtwork">
            <div class="preview-placeholder">🎵</div>
          </div>
        </div>

        <div class="player-controls">
          <button class="pattern-btn" id="prevTrackBtn">⏮️</button>
          <button class="pattern-btn" id="playPauseTrackBtn">▶️</button>
          <button class="pattern-btn" id="nextTrackBtn">⏭️</button>
          <button class="pattern-btn" id="shuffleBtn">🔀</button>
          <button class="pattern-btn" id="repeatBtn">🔁</button>
        </div>

        <div class="progress-section">
          <div class="time-display">
            <span id="currentTime">00:00</span>
            <span id="totalTime">00:00</span>
          </div>
          <div class="progress-bar-container">
            <input type="range" class="control-slider" id="progressSlider" min="0" max="100" value="0">
          </div>
        </div>

        <div class="volume-section">
          <div class="control-group">
            <div class="control-label">
              <span>Volume</span>
              <span class="control-value" id="volumeValue">100%</span>
            </div>
            <input type="range" class="control-slider" id="volumeSlider" min="0" max="100" value="100">
          </div>
        </div>

        <div class="audio-visualizer" id="audioVisualizer">
          <canvas id="visualizerCanvas" width="400" height="200"></canvas>
        </div>

        <div class="pattern-info">
          <div class="pattern-info-item">
            <span class="pattern-info-label">STATUS:</span>
            <span class="pattern-info-value" id="playerStatus">STOPPED</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">BITRATE:</span>
            <span class="pattern-info-value" id="trackBitrate">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">FORMAT:</span>
            <span class="pattern-info-value" id="trackFormat">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">SYNC MODE:</span>
            <span class="pattern-info-value" id="syncMode">MANUAL</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Videos Tab Content -->
  <div class="tab-content" id="videosTab">
    <div class="media-browser">
      <!-- Left Column - Video Library -->
      <div class="media-library-column">
        <div class="pattern-header">
          <h2>🎬 V3XV0ID VIDEOS</h2>
        </div>

        <div class="media-controls">
          <button class="pattern-btn" id="loadCloudVideosBtn">🌐 LOAD CLOUD VIDEOS</button>
          <button class="pattern-btn" id="loadLocalVideosBtn">📁 LOAD LOCAL VIDEOS</button>
          <button class="pattern-btn" id="refreshVideosBtn">🔄 REFRESH</button>
        </div>

        <div class="media-search">
          <input type="text" class="control-select" id="videoSearch" placeholder="SEARCH VIDEOS...">
        </div>

        <div class="media-filters">
          <select class="control-select" id="videoFormatFilter">
            <option value="">ALL FORMATS</option>
            <option value="mp4">MP4</option>
            <option value="mov">MOV</option>
            <option value="avi">AVI</option>
            <option value="webm">WEBM</option>
          </select>
        </div>

        <div class="media-library" id="videoLibrary">
          <div class="preview-placeholder">CLICK LOAD TO ACCESS VIDEOS</div>
        </div>
      </div>

      <!-- Right Column - Video Preview & Info -->
      <div class="media-preview-column">
        <div class="pattern-header">
          <h2>📺 PREVIEW</h2>
        </div>

        <div class="video-preview-container">
          <video id="videoPreview" controls style="width: 100%; max-height: 300px; background: #000;">
            <div class="preview-placeholder">SELECT VIDEO TO PREVIEW</div>
          </video>
        </div>

        <div class="media-info">
          <div class="pattern-info-item">
            <span class="pattern-info-label">FILE:</span>
            <span class="pattern-info-value" id="videoFileName">NONE</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">FORMAT:</span>
            <span class="pattern-info-value" id="videoFormat">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">DURATION:</span>
            <span class="pattern-info-value" id="videoDuration">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">RESOLUTION:</span>
            <span class="pattern-info-value" id="videoResolution">N/A</span>
          </div>
        </div>

        <div class="media-actions">
          <button class="pattern-btn" id="addVideoToLayerBtn">➕ ADD TO LAYER</button>
          <button class="pattern-btn" id="addVideoToSequenceBtn">🎭 ADD TO SEQUENCE</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Images Tab Content -->
  <div class="tab-content" id="imagesTab">
    <div class="media-browser">
      <!-- Left Column - Image Library -->
      <div class="media-library-column">
        <div class="pattern-header">
          <h2>🖼️ V3XV0ID IMAGES</h2>
        </div>

        <div class="media-controls">
          <button class="pattern-btn" id="loadCloudImagesBtn">🌐 LOAD CLOUD IMAGES</button>
          <button class="pattern-btn" id="loadLocalImagesBtn">📁 LOAD LOCAL IMAGES</button>
          <button class="pattern-btn" id="refreshImagesBtn">🔄 REFRESH</button>
        </div>

        <div class="media-search">
          <input type="text" class="control-select" id="imageSearch" placeholder="SEARCH IMAGES...">
        </div>

        <div class="media-filters">
          <select class="control-select" id="imageFormatFilter">
            <option value="">ALL FORMATS</option>
            <option value="jpg">JPG</option>
            <option value="png">PNG</option>
            <option value="gif">GIF</option>
            <option value="webp">WEBP</option>
          </select>
        </div>

        <div class="image-grid" id="imageLibrary">
          <div class="preview-placeholder">CLICK LOAD TO ACCESS IMAGES</div>
        </div>
      </div>

      <!-- Right Column - Image Preview & Info -->
      <div class="media-preview-column">
        <div class="pattern-header">
          <h2>🖼️ PREVIEW</h2>
        </div>

        <div class="image-preview-container">
          <img id="imagePreview" style="width: 100%; max-height: 400px; object-fit: contain; background: #000;">
          <div class="preview-placeholder" id="imagePlaceholder">SELECT IMAGE TO PREVIEW</div>
        </div>

        <div class="media-info">
          <div class="pattern-info-item">
            <span class="pattern-info-label">FILE:</span>
            <span class="pattern-info-value" id="imageFileName">NONE</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">FORMAT:</span>
            <span class="pattern-info-value" id="imageFormat">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">SIZE:</span>
            <span class="pattern-info-value" id="imageSize">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">DIMENSIONS:</span>
            <span class="pattern-info-value" id="imageDimensions">N/A</span>
          </div>
        </div>

        <div class="media-actions">
          <button class="pattern-btn" id="addImageToLayerBtn">➕ ADD TO LAYER</button>
          <button class="pattern-btn" id="addImageToSequenceBtn">🎭 ADD TO SEQUENCE</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Composer Tab Content -->
  <div class="tab-content" id="composerTab">
    <div class="sequence-composer">
      <!-- Left Column - Sequence Builder -->
      <div class="sequence-builder-column">
        <div class="pattern-header">
          <h2>🎭 SEQUENCE COMPOSER</h2>
        </div>

        <div class="sequence-controls">
          <button class="pattern-btn" id="newSequenceBtn">📄 NEW SEQUENCE</button>
          <button class="pattern-btn" id="loadSequenceBtn">📂 LOAD SEQUENCE</button>
          <button class="pattern-btn" id="saveSequenceBtn">💾 SAVE SEQUENCE</button>
        </div>

        <div class="ai-generation-section">
          <h3>🤖 AI SEQUENCE GENERATOR</h3>
          <div class="ai-controls">
            <select class="control-select" id="sequenceStyle">
              <option value="cyberpunk">CYBERPUNK AESTHETIC</option>
              <option value="ambient">AMBIENT FLOW</option>
              <option value="aggressive">AGGRESSIVE VJ SET</option>
              <option value="minimal">MINIMAL TECHNO</option>
              <option value="psychedelic">PSYCHEDELIC JOURNEY</option>
              <option value="glitch">GLITCH ART</option>
              <option value="abstract">ABSTRACT PATTERNS</option>
              <option value="cinematic">CINEMATIC SEQUENCE</option>
            </select>
            <input type="number" class="control-select" id="sequenceDuration" placeholder="DURATION (SECONDS)" min="10" max="600" value="60">
            <button class="pattern-btn ai-generate-btn" id="generateSequenceBtn">🚀 GENERATE AI SEQUENCE</button>
          </div>
          <div class="ai-status" id="aiGenerationStatus">READY TO GENERATE</div>
        </div>

        <div class="sequence-timeline" id="sequenceTimeline">
          <div class="timeline-header">
            <h3>📊 SEQUENCE TIMELINE</h3>
            <div class="timeline-controls">
              <button class="pattern-btn small" id="playSequenceBtn">▶️</button>
              <button class="pattern-btn small" id="stopSequenceBtn">⏹️</button>
              <span id="sequencePosition">00:00</span>
            </div>
          </div>
          <div class="timeline-tracks" id="timelineTracks">
            <div class="preview-placeholder">CREATE OR GENERATE SEQUENCE</div>
          </div>
        </div>

        <div class="sequence-actions">
          <div class="action-library" id="actionLibrary">
            <h4>🎬 AVAILABLE ACTIONS</h4>
            <div class="action-item" data-action="add-layer">➕ ADD LAYER</div>
            <div class="action-item" data-action="load-images">🖼️ LOAD IMAGES</div>
            <div class="action-item" data-action="load-video">🎬 LOAD VIDEO</div>
            <div class="action-item" data-action="apply-pattern">🎨 APPLY PATTERN</div>
            <div class="action-item" data-action="set-property">⚙️ SET PROPERTY</div>
            <div class="action-item" data-action="crossfade">🎛️ CROSSFADE</div>
            <div class="action-item" data-action="wait">⏱️ WAIT</div>
          </div>
        </div>
      </div>

      <!-- Right Column - Sequence Preview & Library -->
      <div class="sequence-preview-column">
        <div class="pattern-header">
          <h2>📚 SEQUENCE LIBRARY</h2>
        </div>

        <div class="sequence-library" id="sequenceLibrary">
          <div class="sequence-item demo">
            <div class="sequence-name">DEMO: CYBERPUNK INTRO</div>
            <div class="sequence-meta">AI Generated • 45s • 8 actions</div>
          </div>
          <div class="sequence-item demo">
            <div class="sequence-name">DEMO: AMBIENT FLOW</div>
            <div class="sequence-meta">AI Generated • 120s • 12 actions</div>
          </div>
          <div class="sequence-item demo">
            <div class="sequence-name">DEMO: GLITCH BREAKDOWN</div>
            <div class="sequence-meta">AI Generated • 30s • 6 actions</div>
          </div>
        </div>

        <div class="sequence-info">
          <div class="pattern-info-item">
            <span class="pattern-info-label">CURRENT:</span>
            <span class="pattern-info-value" id="currentSequenceName">NONE</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">DURATION:</span>
            <span class="pattern-info-value" id="currentSequenceDuration">N/A</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">ACTIONS:</span>
            <span class="pattern-info-value" id="currentSequenceActions">0</span>
          </div>
          <div class="pattern-info-item">
            <span class="pattern-info-label">STATUS:</span>
            <span class="pattern-info-value" id="sequenceStatus">IDLE</span>
          </div>
        </div>

        <div class="sequence-deployment">
          <h3>🚀 DEPLOY TO LAYERS</h3>
          <button class="pattern-btn" id="deploySequenceBtn">🎭 EXECUTE SEQUENCE</button>
          <button class="pattern-btn" id="previewSequenceBtn">👁️ PREVIEW SEQUENCE</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    window.addEventListener('DOMContentLoaded', function() {
      const { ipcRenderer } = require('electron');
      const { dialog } = require('@electron/remote');
      const fs = require('fs');
      const path = require('path');
      
      // State variables
      let layersA = []; // Palette A layers
      let layersB = []; // Palette B layers
      let selectedLayer = null;
      let globalPaused = false;
      let crossfaderValue = 0; // 0 = full A, 100 = full B, start with full A
      let activePalette = 'A'; // Which palette is currently being shown
      
      // DOM elements
      const layersListA = document.getElementById('layersListA');
      const layersListB = document.getElementById('layersListB');
      const crossfader = document.getElementById('crossfader');
      const selectedLayerInfo = document.getElementById('selectedLayerInfo');
      const addLayerABtn = document.getElementById('addLayerABtn');
      const addLayerBBtn = document.getElementById('addLayerBBtn');
      const playPauseBtn = document.getElementById('playPauseBtn');
      const setBackgroundBtn = document.getElementById('setBackgroundBtn');
      const previewScreen = document.getElementById('previewScreen');
      const outputPreview = document.getElementById('outputPreview');
      const preview2 = document.getElementById('preview2');
      const preview3 = document.getElementById('preview3');
      
      // Control elements
      const speedControl = document.getElementById('speedControl');
      const sizeControl = document.getElementById('sizeControl');
      const jitterControl = document.getElementById('jitterControl');
      const opacityControl = document.getElementById('opacityControl');
      const blendModeControl = document.getElementById('blendModeControl');
      const strobeControl = document.getElementById('strobeControl');
      const impactControl = document.getElementById('impactControl');
      
      // Control value displays
      const speedValue = document.getElementById('speedValue');
      const sizeValue = document.getElementById('sizeValue');
      const jitterValue = document.getElementById('jitterValue');
      const opacityValue = document.getElementById('opacityValue');
      const blendModeValue = document.getElementById('blendModeValue');
      const strobeValue = document.getElementById('strobeValue');
      const impactValue = document.getElementById('impactValue');
      
      // Send commands to output window
      function sendToOutput(command, data = {}) {
        ipcRenderer.send('control-to-output', { command, data });
      }
      
      // Handle messages from output window
      ipcRenderer.on('output-message', (event, message) => {
        const { command, data } = message;
        
        switch (command) {
          case 'layers-updated':
            updateLayersFromOutput(data.layers);
            updateLayersList();
            updatePreview();
            break;
          case 'layer-selected':
            if (data.layer) {
              selectedLayer = data.layer;
              updateSelectedLayer();
            } else {
              selectedLayer = null;
              updateSelectedLayer();
            }
            break;
          case 'global-pause-changed':
            globalPaused = data.globalPaused;
            updatePlayPauseButton();
            break;
          case 'preview-update':
            updateOutputPreview(data);
            updatePalettePreview(data);
            break;
        }
      });
      
      function updateLayersFromOutput(outputLayers) {
        // Clear both palettes and redistribute based on actual palette assignment from output
        layersA = [];
        layersB = [];
        
        outputLayers.forEach(layer => {
          // Use the actual palette assignment from the output window
          const layerPalette = layer.palette || 'A';
          
          if (layerPalette === 'A') {
            layersA.push(layer);
          } else {
            layersB.push(layer);
          }
        });
      }
      
      function updateCrossfader() {
        crossfaderValue = parseInt(crossfader.value);
        
        // Apply crossfader logic to output window
        // 0 = full A, 100 = full B, 50 = mix
        const aOpacity = crossfaderValue <= 50 ? 1 : (100 - crossfaderValue) / 50;
        const bOpacity = crossfaderValue >= 50 ? 1 : crossfaderValue / 50;
        
        // Send crossfader values to output window
        sendToOutput('crossfader-update', { 
          aOpacity, 
          bOpacity, 
          crossfaderValue 
        });
        
        // Update which palette is considered "active" for new layers
        activePalette = crossfaderValue < 50 ? 'A' : 'B';
      }
      
      function updateLayersList() {
        updatePaletteList(layersListA, layersA, 'A');
        updatePaletteList(layersListB, layersB, 'B');
      }
      
      function updatePaletteList(paletteElement, layers, paletteName) {
        paletteElement.innerHTML = '';
        
        layers.forEach(layer => {
          const layerItem = document.createElement('div');
          layerItem.className = 'layer-item';
          if (selectedLayer && selectedLayer.id === layer.id) {
            layerItem.classList.add('selected');
          }
          
          layerItem.innerHTML = `
            <div class="layer-name">
              <span class="drag-handle" title="Drag to reorder">⋮⋮</span>
              ${layer.name}
            </div>
            <div class="layer-buttons">
              <button class="layer-btn ${layer.visible ? 'active' : ''}" onclick="toggleVisibility(${layer.id})" title="Toggle Visibility">👁</button>
              <button class="layer-btn" onclick="loadImages(${layer.id})" title="Load Images">📁</button>
              <button class="layer-btn" onclick="duplicateLayer(${layer.id})" title="Duplicate">⧉</button>
              <button class="layer-btn" onclick="removeLayer(${layer.id})" title="Delete">✕</button>
              <button class="inverse-btn ${layer.inverse ? 'active' : ''}" onclick="toggleInverse(${layer.id})" title="Inverse Colors">⚫⚪</button>
            </div>
          `;
          
          // Make layer item draggable
          layerItem.draggable = true;
          layerItem.dataset.layerId = layer.id;
          layerItem.dataset.palette = paletteName;
          
          layerItem.addEventListener('click', (e) => {
            if (e.target.tagName !== 'BUTTON' && !e.target.classList.contains('drag-handle')) {
              selectLayer(layer.id);
            }
          });
          
          // Add drag and drop event listeners
          layerItem.addEventListener('dragstart', handleDragStart);
          layerItem.addEventListener('dragover', handleDragOver);
          layerItem.addEventListener('dragenter', handleDragEnter);
          layerItem.addEventListener('dragleave', handleDragLeave);
          layerItem.addEventListener('drop', handleDrop);
          layerItem.addEventListener('dragend', handleDragEnd);
          
          paletteElement.appendChild(layerItem);
        });
      }
      
      function updateSelectedLayer() {
        if (selectedLayer) {
          selectedLayerInfo.textContent = `Controlling: ${selectedLayer.name}`;
          
          // Update control values
          speedControl.value = selectedLayer.speed;
          sizeControl.value = selectedLayer.size;
          jitterControl.value = selectedLayer.jitterAmount;
          opacityControl.value = selectedLayer.opacity;
          blendModeControl.value = selectedLayer.blendMode || 'normal';
          strobeControl.value = selectedLayer.strobe;
          impactControl.value = selectedLayer.impact;
          
          // Update display values
          speedValue.textContent = sliderToMs(selectedLayer.speed) + ' ms';
          sizeValue.textContent = selectedLayer.size + '%';
          jitterValue.textContent = selectedLayer.jitterAmount + 'px';
          opacityValue.textContent = selectedLayer.opacity + '%';
          blendModeValue.textContent = (selectedLayer.blendMode || 'normal').replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase());
          strobeValue.textContent = selectedLayer.strobe + ' Hz';
          impactValue.textContent = selectedLayer.impact + ' Hz';
          
          // Enable controls
          [speedControl, sizeControl, jitterControl, opacityControl, blendModeControl, strobeControl, impactControl].forEach(control => {
            control.disabled = false;
          });
        } else {
          selectedLayerInfo.textContent = 'No layer selected';
          
          // Disable controls
          [speedControl, sizeControl, jitterControl, opacityControl, blendModeControl, strobeControl, impactControl].forEach(control => {
            control.disabled = true;
          });
        }
        
        updateLayersList();
      }
      
      function updatePlayPauseButton() {
        if (globalPaused) {
          playPauseBtn.textContent = '▶️ Resume All';
          playPauseBtn.className = 'global-btn resume';
        } else {
          playPauseBtn.textContent = '⏸️ Pause All';
          playPauseBtn.className = 'global-btn pause';
        }
      }
      
      function updatePreview() {
        // Preview 2 shows Palette A (topmost visible layer)
        const visibleLayersA = layersA.filter(l => l.visible);
        const topLayerA = visibleLayersA.length > 0 ? 
          visibleLayersA.reduce((top, layer) => {
            return layer.id > top.id ? layer : top; // Get highest ID (most recent)
          }) : null;
        updatePreviewRow(preview2, topLayerA);
        
        // Preview 3 shows Palette B (topmost visible layer)
        const visibleLayersB = layersB.filter(l => l.visible);
        const topLayerB = visibleLayersB.length > 0 ? 
          visibleLayersB.reduce((top, layer) => {
            return layer.id > top.id ? layer : top; // Get highest ID (most recent)
          }) : null;
        updatePreviewRow(preview3, topLayerB);
      }
      
      function updatePalettePreview(data) {
        // Update Palette A preview with live data
        if (data.paletteA) {
          updatePreviewWithData(preview2, data.paletteA);
        } else {
          // Clear Palette A preview
          const label = preview2.querySelector('.preview-row-label');
          preview2.innerHTML = '';
          preview2.appendChild(label);
          const placeholder = document.createElement('div');
          placeholder.className = 'preview-placeholder';
          placeholder.textContent = 'NO CONTENT';
          preview2.appendChild(placeholder);
        }
        
        // Update Palette B preview with live data
        if (data.paletteB) {
          updatePreviewWithData(preview3, data.paletteB);
        } else {
          // Clear Palette B preview
          const label = preview3.querySelector('.preview-row-label');
          preview3.innerHTML = '';
          preview3.appendChild(label);
          const placeholder = document.createElement('div');
          placeholder.className = 'preview-placeholder';
          placeholder.textContent = 'NO CONTENT';
          preview3.appendChild(placeholder);
        }
      }
      
      function updatePreviewWithData(previewElement, data) {
        const label = previewElement.querySelector('.preview-row-label');
        previewElement.innerHTML = '';
        previewElement.appendChild(label);
        
        if (data.imageSrc) {
          // Determine if it's a video or image
          const isVideo = data.imageSrc && (
            data.imageSrc.includes('.mp4') || 
            data.imageSrc.includes('.mov') || 
            data.imageSrc.includes('.avi') || 
            data.imageSrc.includes('.webm') || 
            data.imageSrc.includes('.mkv')
          );
          
          if (isVideo) {
            const previewVideo = document.createElement('video');
            previewVideo.className = 'preview-image';
            previewVideo.src = data.imageSrc;
            previewVideo.autoplay = true;
            previewVideo.loop = true;
            previewVideo.muted = true;
            previewVideo.playsInline = true;
            previewVideo.style.cssText = `
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              opacity: ${data.opacity || 1};
              transform: scale(${Math.min(data.scale || 1, 0.9)});
            `;
            
            if (data.inverse) {
              previewVideo.style.filter = 'invert(1)';
            }
            
            // Ensure video starts playing
            previewVideo.addEventListener('loadeddata', () => {
              previewVideo.play().catch(e => console.log('Preview video autoplay prevented:', e));
            });
            
            previewVideo.onerror = () => {
              previewElement.innerHTML = '<div class="preview-placeholder">VIDEO NOT FOUND</div>';
              previewElement.appendChild(label);
            };
            
            previewElement.appendChild(previewVideo);
          } else {
            const previewImg = document.createElement('img');
            previewImg.className = 'preview-image';
            previewImg.src = data.imageSrc;
            previewImg.style.cssText = `
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              opacity: ${data.opacity || 1};
              transform: scale(${Math.min(data.scale || 1, 0.9)});
            `;
            
            if (data.inverse) {
              previewImg.style.filter = 'invert(1)';
            }
            
            previewImg.onerror = () => {
              previewElement.innerHTML = '<div class="preview-placeholder">IMAGE NOT FOUND</div>';
              previewElement.appendChild(label);
            };
            
            previewElement.appendChild(previewImg);
          }
        }
      }
      
      function updateOutputPreview(data) {
        // Update the output preview row with data from the output window
        const label = outputPreview.querySelector('.preview-row-label');
        
        // Clear previous content but keep the label
        outputPreview.innerHTML = '';
        outputPreview.appendChild(label);
        
        if (data.imageSrc) {
          // Determine if it's a video or image
          const isVideo = data.imageSrc && (
            data.imageSrc.includes('.mp4') || 
            data.imageSrc.includes('.mov') || 
            data.imageSrc.includes('.avi') || 
            data.imageSrc.includes('.webm') || 
            data.imageSrc.includes('.mkv')
          );
          
          if (isVideo) {
            const previewVideo = document.createElement('video');
            previewVideo.className = 'preview-image';
            previewVideo.src = data.imageSrc;
            previewVideo.autoplay = true;
            previewVideo.loop = true;
            previewVideo.muted = true;
            previewVideo.playsInline = true;
            previewVideo.style.cssText = `
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              opacity: ${data.opacity || 1};
              transform: scale(${Math.min(data.scale || 1, 0.9)});
            `;
            
            if (data.inverse) {
              previewVideo.style.filter = 'invert(1)';
            }
            
            // Ensure video starts playing
            previewVideo.addEventListener('loadeddata', () => {
              previewVideo.play().catch(e => console.log('Output preview video autoplay prevented:', e));
            });
            
            previewVideo.onerror = () => {
              outputPreview.innerHTML = '<div class="preview-placeholder">VIDEO NOT FOUND</div>';
              outputPreview.appendChild(label);
            };
            
            outputPreview.appendChild(previewVideo);
          } else {
            const previewImg = document.createElement('img');
            previewImg.className = 'preview-image';
            previewImg.src = data.imageSrc;
            previewImg.style.cssText = `
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              opacity: ${data.opacity || 1};
              transform: scale(${Math.min(data.scale || 1, 0.9)});
            `;
            
            if (data.inverse) {
              previewImg.style.filter = 'invert(1)';
            }
            
            previewImg.onerror = () => {
              outputPreview.innerHTML = '<div class="preview-placeholder">IMAGE NOT FOUND</div>';
              outputPreview.appendChild(label);
            };
            
            outputPreview.appendChild(previewImg);
          }
        } else if (data.hasDefaultBackground) {
          const previewImg = document.createElement('img');
          previewImg.className = 'preview-image';
          previewImg.src = '../vexvoid.png';
          previewImg.style.cssText = `
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
          `;
          
          if (data.defaultBackgroundInverse) {
            previewImg.style.filter = 'invert(1)';
          }
          
          outputPreview.appendChild(previewImg);
        } else {
          const placeholder = document.createElement('div');
          placeholder.className = 'preview-placeholder';
          placeholder.textContent = 'NO OUTPUT CONTENT';
          outputPreview.appendChild(placeholder);
        }
        
        // Update individual layer previews
        if (data.layers && data.layers.length > 0) {
          updatePreviewRow(preview2, data.layers[1]); // Second layer
          updatePreviewRow(preview3, data.layers[2]); // Third layer
        }
      }
      
      function updatePreviewRow(previewRow, layer) {
        const label = previewRow.querySelector('.preview-row-label');
        
        // Clear previous content but keep the label
        previewRow.innerHTML = '';
        previewRow.appendChild(label);
        
        if (layer && layer.visible && layer.imageSrc) {
          // Determine if it's a video or image
          const isVideo = layer.imageSrc && (
            layer.imageSrc.includes('.mp4') || 
            layer.imageSrc.includes('.mov') || 
            layer.imageSrc.includes('.avi') || 
            layer.imageSrc.includes('.webm') || 
            layer.imageSrc.includes('.mkv')
          );
          
          if (isVideo) {
            const previewVideo = document.createElement('video');
            previewVideo.className = 'preview-image';
            previewVideo.src = layer.imageSrc;
            previewVideo.autoplay = true;
            previewVideo.loop = true;
            previewVideo.muted = true;
            previewVideo.playsInline = true;
            previewVideo.style.cssText = `
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              opacity: ${layer.opacity || 1};
              transform: scale(${Math.min(layer.scale || 1, 0.9)});
            `;
            
            // Apply inverse filter if enabled
            if (layer.inverse) {
              previewVideo.style.filter = 'invert(1)';
            }
            
            // Ensure video starts playing
            previewVideo.addEventListener('loadeddata', () => {
              previewVideo.play().catch(e => console.log('Layer preview video autoplay prevented:', e));
            });
            
            previewVideo.onerror = () => {
              const placeholder = document.createElement('div');
              placeholder.className = 'preview-placeholder';
              placeholder.textContent = `${layer.name} - VIDEO ERROR`;
              previewRow.innerHTML = '';
              previewRow.appendChild(label);
              previewRow.appendChild(placeholder);
            };
            
            previewRow.appendChild(previewVideo);
          } else {
            const previewImg = document.createElement('img');
            previewImg.className = 'preview-image';
            previewImg.src = layer.imageSrc;
            previewImg.style.cssText = `
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              opacity: ${layer.opacity || 1};
              transform: scale(${Math.min(layer.scale || 1, 0.9)});
            `;
            
            // Apply inverse filter if enabled
            if (layer.inverse) {
              previewImg.style.filter = 'invert(1)';
            }
            
            previewImg.onerror = () => {
              const placeholder = document.createElement('div');
              placeholder.className = 'preview-placeholder';
              placeholder.textContent = `${layer.name} - IMAGE ERROR`;
              previewRow.innerHTML = '';
              previewRow.appendChild(label);
              previewRow.appendChild(placeholder);
            };
            
            previewRow.appendChild(previewImg);
          }
        } else {
          const placeholder = document.createElement('div');
          placeholder.className = 'preview-placeholder';
          placeholder.textContent = layer ? `${layer.name} (hidden)` : 'NO LAYER';
          previewRow.appendChild(placeholder);
        }
      }
      
      function sliderToMs(x) {
        x = Number(x);
        if (x <= 50) {
          return Math.round((x / 50) * 250);
        } else {
          return Math.round(250 + Math.pow((x - 50) / 50, 2) * (20000 - 250));
        }
      }
      
      // Global functions for button clicks
      window.selectLayer = function(layerId) {
        sendToOutput('select-layer', { layerId });
      };
      
      window.toggleVisibility = function(layerId) {
        sendToOutput('toggle-visibility', { layerId });
      };
      
      window.loadImages = async function(layerId) {
        const result = await dialog.showOpenDialog({
          properties: ['openFile', 'openDirectory', 'multiSelections'],
          filters: [
            { name: 'Media Files', extensions: ['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi', 'webm', 'mkv'] },
            { name: 'Images', extensions: ['jpg', 'jpeg', 'png', 'gif'] },
            { name: 'Videos', extensions: ['mp4', 'mov', 'avi', 'webm', 'mkv'] },
            { name: 'All Files', extensions: ['*'] }
          ]
        });
        
        if (!result.canceled && result.filePaths.length > 0) {
          sendToOutput('load-images', { layerId, filePaths: result.filePaths });
        }
      };
      
      window.duplicateLayer = function(layerId) {
        sendToOutput('duplicate-layer', { layerId });
      };
      
      window.removeLayer = function(layerId) {
        sendToOutput('remove-layer', { layerId });
      };
      
      window.toggleInverse = function(layerId) {
        sendToOutput('toggle-inverse', { layerId });
      };
      
      // Drag and drop functionality for layer reordering
      let draggedElement = null;
      let draggedLayerId = null;
      
      function handleDragStart(e) {
        draggedElement = e.target;
        draggedLayerId = parseInt(e.target.dataset.layerId);
        e.target.classList.add('dragging');
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', e.target.outerHTML);
      }
      
      function handleDragOver(e) {
        if (e.preventDefault) {
          e.preventDefault();
        }
        e.dataTransfer.dropEffect = 'move';
        return false;
      }
      
      function handleDragEnter(e) {
        if (e.target !== draggedElement) {
          e.target.classList.add('drag-over');
        }
      }
      
      function handleDragLeave(e) {
        e.target.classList.remove('drag-over');
      }
      
      function handleDrop(e) {
        if (e.stopPropagation) {
          e.stopPropagation();
        }
        
        if (draggedElement !== e.target) {
          const targetLayerId = parseInt(e.target.dataset.layerId);
          if (targetLayerId && draggedLayerId && targetLayerId !== draggedLayerId) {
            reorderLayers(draggedLayerId, targetLayerId);
          }
        }
        
        e.target.classList.remove('drag-over');
        return false;
      }
      
      function handleDragEnd(e) {
        e.target.classList.remove('dragging');
        // Clean up any remaining drag-over classes
        document.querySelectorAll('.drag-over').forEach(el => {
          el.classList.remove('drag-over');
        });
        draggedElement = null;
        draggedLayerId = null;
      }
      
      function reorderLayers(draggedId, targetId) {
        // Find which palette the layers are in
        const allLayers = [...layersA, ...layersB];
        const draggedIndex = allLayers.findIndex(l => l.id === draggedId);
        const targetIndex = allLayers.findIndex(l => l.id === targetId);
        
        if (draggedIndex === -1 || targetIndex === -1) return;
        
        // Determine which palettes the layers belong to
        const draggedPalette = layersA.find(l => l.id === draggedId) ? 'A' : 'B';
        const targetPalette = layersA.find(l => l.id === targetId) ? 'A' : 'B';
        
        // If layers are in different palettes, don't allow reordering
        if (draggedPalette !== targetPalette) return;
        
        // Work with the appropriate palette
        const palette = draggedPalette === 'A' ? layersA : layersB;
        const draggedPaletteIndex = palette.findIndex(l => l.id === draggedId);
        const targetPaletteIndex = palette.findIndex(l => l.id === targetId);
        
        // Remove the dragged layer and insert it at the target position
        const [draggedLayer] = palette.splice(draggedPaletteIndex, 1);
        palette.splice(targetPaletteIndex, 0, draggedLayer);
        
        // Renumber layers based on new order (skip main layer)
        let layerNumber = 1;
        palette.forEach(layer => {
          if (!layer.isMainLayer) {
            // Extract content name, handling different naming patterns
            let contentName = layer.name;
            if (contentName.startsWith('Layer ')) {
              contentName = contentName.replace(/^Layer \d+: /, '');
            }
            // If no content name remains, it was just "Layer X"
            if (contentName === layer.name && /^Layer \d+$/.test(contentName)) {
              contentName = '';
            }
            
            // Set new name
            if (contentName) {
              layer.name = `Layer ${layerNumber}: ${contentName}`;
            } else {
              layer.name = `Layer ${layerNumber}`;
            }
            layerNumber++;
          }
        });
        
        // Send reorder command to output window
        const allLayersOrdered = [...layersA, ...layersB];
        sendToOutput('reorder-layers', { layers: allLayersOrdered.map(l => l.id) });
        
        // Update the UI
        updateLayersList();
        updatePreview();
      }
      
      window.setDefaultBackground = async function() {
        const result = await dialog.showOpenDialog({
          properties: ['openFile'],
          filters: [
            { name: 'Media Files', extensions: ['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi', 'webm', 'mkv'] },
            { name: 'Images', extensions: ['jpg', 'jpeg', 'png', 'gif'] },
            { name: 'Videos', extensions: ['mp4', 'mov', 'avi', 'webm', 'mkv'] },
            { name: 'All Files', extensions: ['*'] }
          ]
        });
        
        if (!result.canceled && result.filePaths.length > 0) {
          sendToOutput('set-default-background', { imagePath: result.filePaths[0] });
        }
      };
      
      // Event listeners
      addLayerABtn.addEventListener('click', () => {
        activePalette = 'A';
        sendToOutput('add-layer', { palette: 'A' });
      });
      
      addLayerBBtn.addEventListener('click', () => {
        activePalette = 'B';
        sendToOutput('add-layer', { palette: 'B' });
      });
      
      crossfader.addEventListener('input', () => {
        updateCrossfader();
      });
      
      playPauseBtn.addEventListener('click', () => {
        sendToOutput('toggle-global-pause');
      });
      
      setBackgroundBtn.addEventListener('click', () => {
        setDefaultBackground();
      });
      
      // Control event listeners
      speedControl.addEventListener('input', () => {
        if (selectedLayer) {
          const value = parseInt(speedControl.value);
          speedValue.textContent = sliderToMs(value) + ' ms';
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'speed', 
            value: value 
          });
        }
      });
      
      sizeControl.addEventListener('input', () => {
        if (selectedLayer) {
          const value = parseInt(sizeControl.value);
          sizeValue.textContent = value + '%';
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'size', 
            value: value 
          });
        }
      });
      
      jitterControl.addEventListener('input', () => {
        if (selectedLayer) {
          const value = parseInt(jitterControl.value);
          jitterValue.textContent = value + 'px';
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'jitterAmount', 
            value: value 
          });
        }
      });
      
      opacityControl.addEventListener('input', () => {
        if (selectedLayer) {
          const value = parseInt(opacityControl.value);
          opacityValue.textContent = value + '%';
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'opacity', 
            value: value 
          });
        }
      });
      
      blendModeControl.addEventListener('change', () => {
        if (selectedLayer) {
          const value = blendModeControl.value;
          blendModeValue.textContent = value.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase());
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'blendMode', 
            value: value 
          });
        }
      });
      
      strobeControl.addEventListener('input', () => {
        if (selectedLayer) {
          const value = parseInt(strobeControl.value);
          strobeValue.textContent = value + ' Hz';
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'strobe', 
            value: value 
          });
        }
      });
      
      impactControl.addEventListener('input', () => {
        if (selectedLayer) {
          const value = parseInt(impactControl.value);
          impactValue.textContent = value + ' Hz';
          sendToOutput('update-layer-property', { 
            layerId: selectedLayer.id, 
            property: 'impact', 
            value: value 
          });
        }
      });
      
      // Initialize crossfader to show Palette A by default
      updateCrossfader();
      
      // Request initial state from output window
      setTimeout(() => {
        sendToOutput('request-initial-state');
      }, 100);

      // ========== V3XV0ID PERFORMANCE SYSTEM ==========
      let performanceSequencer = null;
      let performanceActive = false;
      
      // V3XV0ID Performance DOM elements
      const showPerformanceBtn = document.getElementById('showPerformanceBtn');
      const performancePanel = document.querySelector('.v3xv0id-performance-section');
      const togglePerformancePanel = document.getElementById('togglePerformancePanel');
      const initCloudBtn = document.getElementById('initCloudBtn');
      const startPerformanceBtn = document.getElementById('startPerformanceBtn');
      const stopPerformanceBtn = document.getElementById('stopPerformanceBtn');
      const cloudStatus = document.getElementById('cloudStatus');
      const performanceStatus = document.getElementById('performanceStatus');
      const currentTrack = document.getElementById('currentTrack');
      const progressBar = document.getElementById('progressBar');
      const performanceTime = document.getElementById('performanceTime');
      
      // Show/hide performance panel
      showPerformanceBtn.addEventListener('click', () => {
        performancePanel.style.display = 'block';
        showPerformanceBtn.style.display = 'none';
      });
      
      togglePerformancePanel.addEventListener('click', () => {
        performancePanel.style.display = 'none';
        showPerformanceBtn.style.display = 'block';
      });
      
      // Initialize V3XV0ID Cloud Performance
      initCloudBtn.addEventListener('click', async () => {
        try {
          cloudStatus.textContent = '🌐 CONNECTING...';
          initCloudBtn.disabled = true;
          
          // Import the performance sequencer
          const V3XV0IDPerformanceSequencer = require('./performance-sequencer');
          performanceSequencer = new V3XV0IDPerformanceSequencer();
          
          // Initialize cloud connection and download content
          const success = await performanceSequencer.initialize();
          
          if (success) {
            cloudStatus.textContent = '✅ CLOUD CONNECTED';
            performanceStatus.textContent = '🎭 READY TO PERFORM';
            startPerformanceBtn.disabled = false;
            
            // Set up performance event callbacks
            performanceSequencer.onPerformanceEvent((event, data) => {
              handlePerformanceEvent(event, data);
            });
            
            console.log('🎭 V3XV0ID Performance System initialized successfully');
          } else {
            throw new Error('Failed to initialize performance system');
          }
          
        } catch (error) {
          console.error('❌ Failed to initialize V3XV0ID Performance System:', error);
          cloudStatus.textContent = '❌ CONNECTION FAILED';
          performanceStatus.textContent = '⚠️ ERROR';
          initCloudBtn.disabled = false;
        }
      });
      
      // Start V3XV0ID Performance
      startPerformanceBtn.addEventListener('click', async () => {
        if (!performanceSequencer) return;
        
        try {
          performanceStatus.textContent = '🎭 STARTING...';
          startPerformanceBtn.disabled = true;
          
          const success = await performanceSequencer.startPerformance();
          
          if (success) {
            performanceActive = true;
            performanceStatus.textContent = '🎭 PERFORMING';
            stopPerformanceBtn.disabled = false;
            
            console.log('🎭 V3XV0ID Performance started');
          } else {
            throw new Error('Failed to start performance');
          }
          
        } catch (error) {
          console.error('❌ Failed to start performance:', error);
          performanceStatus.textContent = '❌ START FAILED';
          startPerformanceBtn.disabled = false;
        }
      });
      
      // Stop V3XV0ID Performance
      stopPerformanceBtn.addEventListener('click', () => {
        if (!performanceSequencer) return;
        
        performanceSequencer.stopPerformance();
        performanceActive = false;
        performanceStatus.textContent = '⏹️ STOPPED';
        startPerformanceBtn.disabled = false;
        stopPerformanceBtn.disabled = true;
        
        currentTrack.textContent = 'NO TRACK';
        progressBar.style.width = '0%';
        performanceTime.textContent = '00:00 / 00:00';
        
        console.log('🛑 V3XV0ID Performance stopped');
      });
      
      // Handle performance events
      function handlePerformanceEvent(event, data) {
        switch (event) {
          case 'performance-started':
            console.log('🎭 Performance started:', data.name);
            currentTrack.textContent = data.name.toUpperCase();
            break;
            
          case 'visual-sync':
            updatePerformanceProgress(data);
            break;
            
          case 'image-change':
            loadPerformanceImage(data.imagePath);
            break;
            
          case 'video-change':
            loadPerformanceVideo(data.videoPath);
            break;
            
          case 'palette-switch':
            switchPaletteAutomatically();
            break;
        }
      }
      
      // Update performance progress UI
      function updatePerformanceProgress(data) {
        const { progress, currentTime, duration } = data;
        
        progressBar.style.width = (progress * 100) + '%';
        
        const currentMin = Math.floor(currentTime / 60);
        const currentSec = Math.floor(currentTime % 60);
        const durationMin = Math.floor(duration / 60);
        const durationSec = Math.floor(duration % 60);
        
        performanceTime.textContent = 
          `${currentMin.toString().padStart(2, '0')}:${currentSec.toString().padStart(2, '0')} / ` +
          `${durationMin.toString().padStart(2, '0')}:${durationSec.toString().padStart(2, '0')}`;
      }
      
      // Load performance content into layers
      function loadPerformanceImage(imagePath) {
        const targetPalette = activePalette;
        const layers = targetPalette === 'A' ? layersA : layersB;
        
        if (layers.length === 0) {
          sendToOutput('add-layer', { palette: targetPalette });
          setTimeout(() => {
            const newLayers = targetPalette === 'A' ? layersA : layersB;
            if (newLayers.length > 0) {
              const layerId = newLayers[newLayers.length - 1].id;
              sendToOutput('load-images', { layerId, filePaths: [imagePath] });
            }
          }, 100);
        } else {
          const layerIndex = Math.floor(Math.random() * layers.length);
          const layerId = layers[layerIndex].id;
          sendToOutput('load-images', { layerId, filePaths: [imagePath] });
        }
      }
      
      function loadPerformanceVideo(videoPath) {
        const targetPalette = activePalette === 'A' ? 'B' : 'A';
        const layers = targetPalette === 'A' ? layersA : layersB;
        
        if (layers.length === 0) {
          sendToOutput('add-layer', { palette: targetPalette });
          setTimeout(() => {
            const newLayers = targetPalette === 'A' ? layersA : layersB;
            if (newLayers.length > 0) {
              const layerId = newLayers[newLayers.length - 1].id;
              sendToOutput('load-images', { layerId, filePaths: [videoPath] });
            }
          }, 100);
        } else {
          const layerIndex = Math.floor(Math.random() * layers.length);
          const layerId = layers[layerIndex].id;
          sendToOutput('load-images', { layerId, filePaths: [videoPath] });
        }
      }
      
      // Automatically switch between palettes
      function switchPaletteAutomatically() {
        const currentValue = parseInt(crossfader.value);
        const targetValue = currentValue < 50 ? 100 : 0;
        animateCrossfader(currentValue, targetValue, 2000);
      }
      
      function animateCrossfader(fromValue, toValue, duration) {
        const startTime = Date.now();
        const valueRange = toValue - fromValue;
        
        function update() {
          const elapsed = Date.now() - startTime;
          const progress = Math.min(elapsed / duration, 1);
          const easedProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
          const currentValue = fromValue + (valueRange * easedProgress);
          
          crossfader.value = Math.round(currentValue);
          updateCrossfader();
          
          if (progress < 1) {
            requestAnimationFrame(update);
          }
        }
        
        update();
      }
      
      console.log('🎭 V3XV0ID Performance System UI initialized');

      // ========== P5.JS PATTERN GENERATOR ==========
      
      // Pattern Generator State
      let patternSketch = null;
      let patternCanvas = null;
      let patternRunning = false;
      let patternTargetLayers = new Set();
      
      // Pattern Generator DOM Elements
      const presetSelector = document.getElementById('presetSelector');
      const codeEditor = document.getElementById('codeEditor');
      const runPatternBtn = document.getElementById('runPatternBtn');
      const stopPatternBtn = document.getElementById('stopPatternBtn');
      const exportPatternBtn = document.getElementById('exportPatternBtn');
      const patternPreviewCanvas = document.getElementById('patternPreviewCanvas');
      const layerTargets = document.getElementById('layerTargets');
      const patternStatus = document.getElementById('patternStatus');
      const patternFPS = document.getElementById('patternFPS');
      const patternResolution = document.getElementById('patternResolution');
      const activeLayers = document.getElementById('activeLayers');

      // Tab Switching Functionality
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');

      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetTab = button.getAttribute('data-tab');
          
          // Update button states
          tabButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          // Update content visibility
          tabContents.forEach(content => content.classList.remove('active'));
          const targetContent = document.getElementById(targetTab + 'Tab');
          if (targetContent) {
            targetContent.classList.add('active');
          }
          
          // Initialize pattern generator when switching to patterns tab
          if (targetTab === 'patterns') {
            initializePatternGenerator();
          }
        });
      });

      // Pattern Presets
      const patternPresets = {
        plasma: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  loadPixels();
  for (let x = 0; x < width; x++) {
    for (let y = 0; y < height; y++) {
      let c = sin(dist(x, y, width/2, height/2) * 0.01 + frameCount * 0.05) * 50 + 50;
      let h = (frameCount + x * 0.5 + y * 0.5) % 360;
      let idx = (x + y * width) * 4;
      let col = color(h, 80, c);
      pixels[idx] = red(col);
      pixels[idx + 1] = green(col);
      pixels[idx + 2] = blue(col);
      pixels[idx + 3] = 255;
    }
  }
  updatePixels();
}`,
        
        tunnel: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  background(0);
  translate(width/2, height/2);
  
  for (let r = 0; r < 200; r += 5) {
    let hue = (frameCount + r * 2) % 360;
    stroke(hue, 80, 90);
    strokeWeight(2);
    noFill();
    
    let sides = 6;
    beginShape();
    for (let i = 0; i <= sides; i++) {
      let angle = map(i, 0, sides, 0, TWO_PI);
      let x = cos(angle + frameCount * 0.01) * r;
      let y = sin(angle + frameCount * 0.01) * r;
      vertex(x, y);
    }
    endShape();
  }
}`,

        mandala: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  background(0, 0, 5);
  translate(width/2, height/2);
  
  let arms = 12;
  for (let a = 0; a < arms; a++) {
    push();
    rotate(TWO_PI / arms * a + frameCount * 0.005);
    
    for (let r = 10; r < 150; r += 10) {
      let hue = (frameCount + r + a * 30) % 360;
      stroke(hue, 70, 80);
      strokeWeight(1);
      noFill();
      
      let x = cos(frameCount * 0.02 + r * 0.1) * r;
      let y = sin(frameCount * 0.03 + r * 0.1) * r * 0.5;
      circle(x, y, 8);
    }
    pop();
  }
}`,

        matrix: `function setup() {
  createCanvas(400, 400);
  colorMode(RGB);
  background(0);
}

let drops = [];

function draw() {
  background(0, 20);
  
  if (drops.length < 50) {
    drops.push({
      x: random(width),
      y: 0,
      speed: random(2, 8),
      char: String.fromCharCode(0x30A0 + random(96))
    });
  }
  
  fill(0, 255, 0);
  textSize(16);
  
  for (let i = drops.length - 1; i >= 0; i--) {
    let drop = drops[i];
    text(drop.char, drop.x, drop.y);
    drop.y += drop.speed;
    
    if (drop.y > height) {
      drops.splice(i, 1);
    }
  }
}`,

        fractal: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  background(0);
  translate(width/2, height);
  
  let angle = frameCount * 0.01;
  branch(100, angle);
}

function branch(len, angle) {
  let hue = map(len, 10, 100, 0, 360);
  stroke(hue, 80, 90);
  strokeWeight(map(len, 10, 100, 1, 5));
  
  line(0, 0, 0, -len);
  translate(0, -len);
  
  if (len > 10) {
    push();
    rotate(angle);
    branch(len * 0.67, angle);
    pop();
    
    push();
    rotate(-angle);
    branch(len * 0.67, angle);
    pop();
  }
}`,

        particles: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

let particles = [];

function draw() {
  background(0, 0, 0, 10);
  
  if (particles.length < 100) {
    particles.push({
      x: width/2,
      y: height/2,
      vx: random(-2, 2),
      vy: random(-2, 2),
      life: 255,
      hue: random(360)
    });
  }
  
  for (let i = particles.length - 1; i >= 0; i--) {
    let p = particles[i];
    
    fill(p.hue, 80, 90, p.life);
    noStroke();
    circle(p.x, p.y, 4);
    
    p.x += p.vx;
    p.y += p.vy;
    p.life -= 2;
    
    if (p.life <= 0) {
      particles.splice(i, 1);
    }
  }
}`,

        noise: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  loadPixels();
  
  for (let x = 0; x < width; x++) {
    for (let y = 0; y < height; y++) {
      let n = noise(x * 0.01, y * 0.01, frameCount * 0.01);
      let hue = n * 360;
      let bright = n * 100;
      
      let idx = (x + y * width) * 4;
      let col = color(hue, 80, bright);
      pixels[idx] = red(col);
      pixels[idx + 1] = green(col);
      pixels[idx + 2] = blue(col);
      pixels[idx + 3] = 255;
    }
  }
  updatePixels();
}`,

        kaleidoscope: `function setup() {
  createCanvas(400, 400);
  colorMode(HSB, 360, 100, 100);
}

function draw() {
  background(0);
  translate(width/2, height/2);
  
  let segments = 8;
  for (let i = 0; i < segments; i++) {
    push();
    rotate(TWO_PI / segments * i);
    
    if (i % 2 == 0) {
      scale(1, -1);
    }
    
    drawPattern();
    pop();
  }
}

function drawPattern() {
  for (let r = 0; r < 150; r += 10) {
    let hue = (frameCount + r) % 360;
    stroke(hue, 80, 90);
    strokeWeight(2);
    noFill();
    
    let x = cos(frameCount * 0.02 + r * 0.1) * r;
    let y = sin(frameCount * 0.03 + r * 0.1) * r;
    circle(x, y, 15);
  }
}`
      };

      // Initialize Pattern Generator
      function initializePatternGenerator() {
        updateLayerTargets();
        
        // Set default code if empty
        if (!codeEditor.value.trim()) {
          codeEditor.value = patternPresets.noise;
        }
      }

      // Update layer targets list
      function updateLayerTargets() {
        layerTargets.innerHTML = '';
        
        const allLayers = [...layersA, ...layersB];
        allLayers.forEach(layer => {
          const targetItem = document.createElement('div');
          targetItem.className = 'layer-target-item';
          
          targetItem.innerHTML = `
            <input type="checkbox" class="layer-target-checkbox" data-layer-id="${layer.id}">
            <span class="layer-target-name">${layer.name}</span>
          `;
          
          const checkbox = targetItem.querySelector('.layer-target-checkbox');
          checkbox.checked = patternTargetLayers.has(layer.id);
          
          checkbox.addEventListener('change', () => {
            if (checkbox.checked) {
              patternTargetLayers.add(layer.id);
            } else {
              patternTargetLayers.delete(layer.id);
            }
            updateActiveLayersCount();
          });
          
          layerTargets.appendChild(targetItem);
        });
        
        updateActiveLayersCount();
      }

      // Update active layers count
      function updateActiveLayersCount() {
        activeLayers.textContent = patternTargetLayers.size.toString();
      }

      // Preset selector event
      presetSelector.addEventListener('change', () => {
        const presetName = presetSelector.value;
        if (presetName && patternPresets[presetName]) {
          codeEditor.value = patternPresets[presetName];
        }
      });

      // Run pattern button
      runPatternBtn.addEventListener('click', () => {
        try {
          if (patternSketch) {
            patternSketch.remove();
          }
          
          // Clear preview canvas
          patternPreviewCanvas.innerHTML = '';
          
          // Create new P5 instance with simpler approach
          const code = codeEditor.value;
          
          // Create P5 sketch function
          const sketchFunction = new Function('p', `
            ${code}
            
            // Ensure setup and draw are properly bound to p5 instance
            if (typeof setup !== 'undefined') {
              p.setup = setup;
            }
            if (typeof draw !== 'undefined') {
              p.draw = draw;
            }
          `);
          
          // Create P5 instance
          patternSketch = new p5((p) => {
            // Execute the sketch function to bind setup and draw
            sketchFunction(p);
            
            // Override createCanvas to render in our container
            const originalCreateCanvas = p.createCanvas;
            p.createCanvas = function(w, h) {
              const canvas = originalCreateCanvas.call(p, w, h);
              patternPreviewCanvas.appendChild(p.canvas);
              return canvas;
            };
          });
          
          patternRunning = true;
          patternStatus.textContent = 'RUNNING';
          runPatternBtn.classList.add('active');
          stopPatternBtn.classList.remove('active');
          
          // Start FPS monitoring
          monitorFPS();
          
          console.log('🎨 Pattern started successfully');
          
        } catch (error) {
          console.error('❌ Pattern error:', error);
          patternStatus.textContent = 'ERROR';
          patternPreviewCanvas.innerHTML = `<div class="preview-placeholder">ERROR: ${error.message}</div>`;
        }
      });

      // Stop pattern button
      stopPatternBtn.addEventListener('click', () => {
        if (patternSketch) {
          patternSketch.remove();
          patternSketch = null;
        }
        
        patternRunning = false;
        patternStatus.textContent = 'STOPPED';
        patternFPS.textContent = '0';
        runPatternBtn.classList.remove('active');
        stopPatternBtn.classList.add('active');
        
        patternPreviewCanvas.innerHTML = '<div class="preview-placeholder">CLICK RUN TO START PATTERN</div>';
        
        console.log('🛑 Pattern stopped');
      });

      // Export pattern button
      exportPatternBtn.addEventListener('click', () => {
        if (patternTargetLayers.size === 0) {
          alert('Please select target layers first!');
          return;
        }
        
        // Send pattern to selected layers
        const patternData = {
          code: codeEditor.value,
          targetLayers: Array.from(patternTargetLayers)
        };
        
        sendToOutput('apply-pattern', patternData);
        
        console.log('💾 Pattern exported to layers:', Array.from(patternTargetLayers));
      });

      // Monitor FPS
      function monitorFPS() {
        if (!patternRunning) return;
        
        const fps = Math.round(frameRate() || 0);
        patternFPS.textContent = fps.toString();
        
        setTimeout(monitorFPS, 1000);
      }

      // Update layer targets when layers change
      const originalUpdateLayersList = updateLayersList;
      updateLayersList = function() {
        originalUpdateLayersList();
        if (document.querySelector('.tab-content.active')?.id === 'patternsTab') {
          updateLayerTargets();
        }
      };

      console.log('🎨 V3XV0ID Pattern Generator initialized');

      // ========== MUSIC PLAYER SYSTEM ==========
      
      // Music Player State
      let currentAudio = null;
      let musicLibraryTracks = [];
      let currentTrackIndex = -1;
      let isPlaying = false;
      let isShuffled = false;
      let repeatMode = 'none'; // 'none', 'one', 'all'
      let musicQueue = [];
      let audioContext = null;
      let analyser = null;
      let dataArray = null;
      
      // Music Player DOM Elements
      const loadMusicBtn = document.getElementById('loadMusicBtn');
      const loadLocalMusicBtn = document.getElementById('loadLocalMusicBtn');
      const musicSearch = document.getElementById('musicSearch');
      const musicLibrary = document.getElementById('musicLibrary');
      const musicQueueElement = document.getElementById('musicQueue');
      const currentTrackTitle = document.getElementById('currentTrackTitle');
      const currentTrackArtist = document.getElementById('currentTrackArtist');
      const trackArtwork = document.getElementById('trackArtwork');
      const prevTrackBtn = document.getElementById('prevTrackBtn');
      const playPauseTrackBtn = document.getElementById('playPauseTrackBtn');
      const nextTrackBtn = document.getElementById('nextTrackBtn');
      const shuffleBtn = document.getElementById('shuffleBtn');
      const repeatBtn = document.getElementById('repeatBtn');
      const currentTime = document.getElementById('currentTime');
      const totalTime = document.getElementById('totalTime');
      const progressSlider = document.getElementById('progressSlider');
      const volumeSlider = document.getElementById('volumeSlider');
      const volumeValue = document.getElementById('volumeValue');
      const playerStatus = document.getElementById('playerStatus');
      const trackBitrate = document.getElementById('trackBitrate');
      const trackFormat = document.getElementById('trackFormat');
      const syncMode = document.getElementById('syncMode');
      const visualizerCanvas = document.getElementById('visualizerCanvas');

      // Initialize audio visualizer
      function initializeAudioVisualizer() {
        const canvas = visualizerCanvas;
        const ctx = canvas.getContext('2d');
        
        function drawVisualizer() {
          if (!analyser || !dataArray) {
            // Draw placeholder bars
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
            for (let i = 0; i < 32; i++) {
              const barWidth = canvas.width / 32;
              const barHeight = Math.random() * 20 + 5;
              ctx.fillRect(i * barWidth, canvas.height - barHeight, barWidth - 2, barHeight);
            }
          } else {
            analyser.getByteFrequencyData(dataArray);
            
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            const barWidth = canvas.width / dataArray.length;
            for (let i = 0; i < dataArray.length; i++) {
              const barHeight = (dataArray[i] / 255) * canvas.height * 0.8;
              const hue = (i / dataArray.length) * 360;
              ctx.fillStyle = `hsl(${hue}, 80%, 60%)`;
              ctx.fillRect(i * barWidth, canvas.height - barHeight, barWidth - 2, barHeight);
            }
          }
          
          requestAnimationFrame(drawVisualizer);
        }
        
        drawVisualizer();
      }

      // Load cloud music
      loadMusicBtn.addEventListener('click', async () => {
        try {
          playerStatus.textContent = 'LOADING...';
          loadMusicBtn.disabled = true;
          
          // Use existing cloud manager if available
          if (typeof V3XV0IDCloudManager !== 'undefined') {
            const cloudManager = new V3XV0IDCloudManager();
            await cloudManager.initialize();
            
            const musicFiles = await cloudManager.listFiles('v3xv0id-music');
            musicLibraryTracks = musicFiles.map((file, index) => ({
              id: index,
              name: file.name.replace(/\.[^/.]+$/, ''), // Remove extension
              artist: 'V3XV0ID',
              duration: '00:00',
              format: file.name.split('.').pop().toUpperCase(),
              url: file.url,
              cloudFile: true
            }));
            
            renderMusicLibrary();
            playerStatus.textContent = 'READY';
            
          } else {
            // Demo mode - generate sample tracks
            musicLibraryTracks = [
              { id: 1, name: 'CYBER DREAMS', artist: 'V3XV0ID', duration: '04:32', format: 'MP3', url: null },
              { id: 2, name: 'NEON NIGHTS', artist: 'V3XV0ID', duration: '03:45', format: 'MP3', url: null },
              { id: 3, name: 'DIGITAL RAIN', artist: 'V3XV0ID', duration: '05:12', format: 'MP3', url: null },
              { id: 4, name: 'MATRIX PULSE', artist: 'V3XV0ID', duration: '04:08', format: 'MP3', url: null },
              { id: 5, name: 'VOID ECHOES', artist: 'V3XV0ID', duration: '06:23', format: 'MP3', url: null }
            ];
            
            renderMusicLibrary();
            playerStatus.textContent = 'DEMO MODE';
          }
          
        } catch (error) {
          console.error('❌ Failed to load cloud music:', error);
          playerStatus.textContent = 'ERROR';
        } finally {
          loadMusicBtn.disabled = false;
        }
      });

      // Load local music
      loadLocalMusicBtn.addEventListener('click', async () => {
        try {
          const result = await dialog.showOpenDialog({
            properties: ['openFile', 'multiSelections'],
            filters: [
              { name: 'Audio Files', extensions: ['mp3', 'wav', 'ogg', 'flac', 'm4a'] },
              { name: 'All Files', extensions: ['*'] }
            ]
          });
          
          if (!result.canceled && result.filePaths.length > 0) {
            const localTracks = result.filePaths.map((filePath, index) => ({
              id: musicLibraryTracks.length + index,
              name: path.basename(filePath, path.extname(filePath)),
              artist: 'LOCAL',
              duration: '00:00',
              format: path.extname(filePath).slice(1).toUpperCase(),
              url: 'file://' + filePath,
              cloudFile: false
            }));
            
            musicLibraryTracks = [...musicLibraryTracks, ...localTracks];
            renderMusicLibrary();
            playerStatus.textContent = 'READY';
          }
          
        } catch (error) {
          console.error('❌ Failed to load local music:', error);
          playerStatus.textContent = 'ERROR';
        }
      });

      // Render music library
      function renderMusicLibrary() {
        musicLibrary.innerHTML = '';
        
        const filteredTracks = musicLibraryTracks.filter(track => 
          track.name.toLowerCase().includes(musicSearch.value.toLowerCase()) ||
          track.artist.toLowerCase().includes(musicSearch.value.toLowerCase())
        );
        
        filteredTracks.forEach((track, index) => {
          const trackItem = document.createElement('div');
          trackItem.className = 'music-track-item';
          if (currentTrackIndex === track.id) {
            trackItem.classList.add('playing');
          }
          
          trackItem.innerHTML = `
            <div class="track-number">${track.id + 1}</div>
            <div class="track-details">
              <div class="track-name">${track.name}</div>
              <div class="track-meta">${track.artist} • ${track.format}</div>
            </div>
            <div class="track-duration">${track.duration}</div>
          `;
          
          trackItem.addEventListener('click', () => {
            playTrack(track.id);
          });
          
          trackItem.addEventListener('dblclick', () => {
            addToQueue(track.id);
          });
          
          musicLibrary.appendChild(trackItem);
        });
      }

      // Play track
      function playTrack(trackId) {
        const track = musicLibraryTracks.find(t => t.id === trackId);
        if (!track) return;
        
        // Stop current audio
        if (currentAudio) {
          currentAudio.pause();
          currentAudio = null;
        }
        
        currentTrackIndex = trackId;
        currentTrackTitle.textContent = track.name;
        currentTrackArtist.textContent = track.artist;
        trackFormat.textContent = track.format;
        
        if (track.url) {
          currentAudio = new Audio(track.url);
          currentAudio.volume = volumeSlider.value / 100;
          
          // Set up audio context for visualizer
          if (!audioContext) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            analyser.fftSize = 64;
            dataArray = new Uint8Array(analyser.frequencyBinCount);
          }
          
          const source = audioContext.createMediaElementSource(currentAudio);
          source.connect(analyser);
          analyser.connect(audioContext.destination);
          
          currentAudio.addEventListener('loadedmetadata', () => {
            totalTime.textContent = formatTime(currentAudio.duration);
            progressSlider.max = currentAudio.duration;
          });
          
          currentAudio.addEventListener('timeupdate', () => {
            currentTime.textContent = formatTime(currentAudio.currentTime);
            progressSlider.value = currentAudio.currentTime;
          });
          
          currentAudio.addEventListener('ended', () => {
            nextTrack();
          });
          
          currentAudio.play();
          isPlaying = true;
          playPauseTrackBtn.textContent = '⏸️';
          playerStatus.textContent = 'PLAYING';
          
        } else {
          playerStatus.textContent = 'DEMO MODE - NO AUDIO';
        }
        
        renderMusicLibrary();
      }

      // Player controls
      playPauseTrackBtn.addEventListener('click', () => {
        if (!currentAudio) return;
        
        if (isPlaying) {
          currentAudio.pause();
          isPlaying = false;
          playPauseTrackBtn.textContent = '▶️';
          playerStatus.textContent = 'PAUSED';
        } else {
          currentAudio.play();
          isPlaying = true;
          playPauseTrackBtn.textContent = '⏸️';
          playerStatus.textContent = 'PLAYING';
        }
      });

      nextTrackBtn.addEventListener('click', () => {
        nextTrack();
      });

      prevTrackBtn.addEventListener('click', () => {
        prevTrack();
      });

      function nextTrack() {
        if (musicLibraryTracks.length === 0) return;
        
        let nextIndex = currentTrackIndex + 1;
        if (nextIndex >= musicLibraryTracks.length) {
          nextIndex = 0;
        }
        
        playTrack(musicLibraryTracks[nextIndex].id);
      }

      function prevTrack() {
        if (musicLibraryTracks.length === 0) return;
        
        let prevIndex = currentTrackIndex - 1;
        if (prevIndex < 0) {
          prevIndex = musicLibraryTracks.length - 1;
        }
        
        playTrack(musicLibraryTracks[prevIndex].id);
      }

      // Volume control
      volumeSlider.addEventListener('input', () => {
        const volume = parseInt(volumeSlider.value);
        volumeValue.textContent = volume + '%';
        
        if (currentAudio) {
          currentAudio.volume = volume / 100;
        }
      });

      // Progress control
      progressSlider.addEventListener('input', () => {
        if (currentAudio) {
          currentAudio.currentTime = progressSlider.value;
        }
      });

      // Search functionality
      musicSearch.addEventListener('input', () => {
        renderMusicLibrary();
      });

      // Format time helper
      function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }

      // Initialize music tab when switching
      const originalTabSwitching = tabButtons.forEach;
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetTab = button.getAttribute('data-tab');
          
          if (targetTab === 'music') {
            initializeAudioVisualizer();
          }
        });
      });

      console.log('🎵 V3XV0ID Music Player initialized');
    });
  </script>
</body>
</html>